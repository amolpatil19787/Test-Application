-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Feb 22, 2019 at 06:24 AM
-- Server version: 5.5.61-38.13-log
-- PHP Version: 5.6.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `acquisce_ApplicationTest`
--

-- --------------------------------------------------------

--
-- Table structure for table `tblAdmins`
--

CREATE TABLE `tblAdmins` (
  `Admin_id` int(11) NOT NULL,
  `EmailID` varchar(100) NOT NULL,
  `Password` varchar(50) NOT NULL,
  `DisplayName` varchar(100) NOT NULL,
  `NumberOfUsers` int(11) NOT NULL,
  `IsActive` tinyint(1) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblAdmins`
--

INSERT INTO `tblAdmins` (`Admin_id`, `EmailID`, `Password`, `DisplayName`, `NumberOfUsers`, `IsActive`) VALUES
(1, 'admin1@gmail.com', '8sy_?#Vv', 'Admin1', 100, 1),
(3, 'admin2@gmail.com', 'UgBiaVHF', 'Admin2', 10, 1),
(4, 'admin3@gmail.com', 'v04+yfF3', 'admin3', 5, 1),
(5, 'admin4@gmail.com', 'I6=O&uW_', 'admin4', 10, 1),
(28, 'pratikshah@acquiscent.com', 'pratu@123', 'Pratiksha', 50, 1),
(24, 'satishshinde1@acquiscent.com', 'satish', 'satish', 10, 1);

-- --------------------------------------------------------

--
-- Table structure for table `tblAnswers`
--

CREATE TABLE `tblAnswers` (
  `AnswerID` int(11) NOT NULL,
  `Answer` varchar(700) NOT NULL,
  `Date` date NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tblAnswers`
--

INSERT INTO `tblAnswers` (`AnswerID`, `Answer`, `Date`) VALUES
(1, 'Model', '2019-01-25'),
(2, 'View', '2019-01-25'),
(3, 'Controller', '2019-01-25'),
(4, 'Data', '2019-01-25'),
(5, 'System.Web.UI.WebControls', '2019-01-25'),
(6, 'System.Web.Mvc', '2019-01-25'),
(7, 'System.Web', '2019-01-25'),
(8, 'System.Web.UI', '2019-01-25'),
(9, 'ASP.NET Identity', '2019-01-25'),
(10, 'Bootstrap', '2019-01-25'),
(11, 'Attribute Routing', '2019-01-25'),
(12, 'All of these', '2019-01-25'),
(13, 'POST', '2019-01-25'),
(14, 'GET', '2019-01-25'),
(15, 'SOAP', '2019-01-25'),
(16, 'SMTP', '2019-01-25'),
(17, 'Temp Data', '2019-01-25'),
(18, 'Viewbag', '2019-01-25'),
(19, 'Session', '2019-01-25'),
(20, 'All above', '2019-01-25'),
(21, '%', '2019-01-25'),
(22, '@', '2019-01-25'),
(23, '$', '2019-01-25'),
(24, '#', '2019-01-25'),
(25, 'Razor', '2019-01-25'),
(26, '.aspx', '2019-01-25'),
(27, 'Spark', '2019-01-25'),
(28, 'All above', '2019-01-25'),
(29, '@Html.TextBox(\"Name\")', '2019-01-25'),
(34, '// Comment', '2019-01-25'),
(35, '<%  Comment  %>', '2019-01-25'),
(36, '@*  Comment  *@', '2019-01-25'),
(37, '/*  Comment  */', '2019-01-25'),
(46, 'Using Layout', '2019-01-25'),
(47, 'Using Master Page', '2019-01-25'),
(48, 'Using Master tag', '2019-01-25'),
(49, 'None of these', '2019-01-25'),
(50, 'Yes', '2019-01-25'),
(51, 'No', '2019-01-25'),
(52, 'May be', '2019-01-25'),
(53, 'None of these', '2019-01-25'),
(54, 'A request will be received by the controller', '2019-01-25'),
(55, 'Basing on the request parameters, it will decide the requested activities', '2019-01-25'),
(56, 'Basing on the request parameters, it will delegates the tasks to be performed', '2019-01-25'),
(57, 'All the above', '2019-01-25'),
(58, 'ViewData : required typecasting\r\nViewBag : Doesn\'t required typecasting', '2019-01-25'),
(59, 'Razor View Engine', '2019-01-25'),
(60, '.cshtml', '2019-01-25'),
(61, 'An interface is not a class. ... The main difference between them is that a class can implement more than one interface but can only inherit from one abstract class. Since C# doesn\'t support multiple inheritance, interfaces are used to implement multiple inheritance.', '2019-01-25'),
(62, 'Class Supports Inheritance and Struct Does not support Inheritance', '2019-01-31'),
(63, 'It is used to display only the essential features of the class and hides the unnecessary information.', '2019-01-31'),
(64, 'When a value type is converted to object type, it is called boxing.\r\nWhen an object type is converted to a value type, it is called unboxing.', '2019-01-31'),
(65, 'Protected access specifier allows a child class to access the member variables and member functions of its base class. This way it helps in implementing inheritance.', '2019-01-31'),
(66, 'Program', '2019-01-31'),
(67, 'Javascript is client side scripting language', '2019-02-05'),
(68, 'Jquery is light weight write less do more javascript library', '2019-02-05'),
(69, 'A', '2019-02-05'),
(70, 'B', '2019-02-05'),
(71, 'C', '2019-02-05'),
(72, 'D', '2019-02-05'),
(73, 'True', '2019-02-05'),
(74, 'False', '2019-02-05'),
(75, 'True', '2019-02-05'),
(76, 'False', '2019-02-05'),
(77, 'True', '2019-02-05'),
(78, 'False', '2019-02-05'),
(79, 'Fdfdfdfdfdf', '2019-02-05'),
(80, 'Abcd', '2019-02-06'),
(81, 'Defg', '2019-02-06'),
(82, 'Mnop', '2019-02-06'),
(83, 'Xyzz', '2019-02-06'),
(84, 'Stou', '2019-02-06'),
(85, 'Ab', '2019-02-11'),
(86, 'Cd', '2019-02-11'),
(87, 'Answer', '2019-02-11'),
(88, 'T1', '2019-02-11'),
(89, 'T2', '2019-02-11'),
(90, 'Php1', '2019-02-12'),
(91, 'Php2', '2019-02-12'),
(92, 'Php3', '2019-02-12'),
(93, 'Php4', '2019-02-12'),
(94, 'Javascript is client side scripting language', '2019-02-12'),
(95, 'True', '2019-02-12'),
(96, 'False', '2019-02-12'),
(97, 'Client side', '2019-02-12'),
(98, 'Server side', '2019-02-12'),
(99, 'Both', '2019-02-12'),
(100, 'None', '2019-02-12'),
(101, 'Jquery is write less do more javascript library', '2019-02-12'),
(102, 'True', '2019-02-12'),
(103, 'False', '2019-02-12'),
(104, 'JavaScript (JS) is a lightweight, interpreted or JIT compiled programming language with first-class functions. Most well-known as the scripting language for Web pages, many non-browser environments also use it, such as node.js and Apache CouchDB.', '2019-02-20'),
(105, '<javascript>', '2019-02-20'),
(106, '<script>', '2019-02-20'),
(107, '<js>', '2019-02-20'),
(108, '<scripting>', '2019-02-20'),
(109, 'Jquery is javascript library', '2019-02-20'),
(110, 'Jquery is json library', '2019-02-20'),
(111, 'Hypertrophic Management Language', '2019-02-20'),
(112, 'Hyperberic Tertiary Logrithm', '2019-02-20'),
(113, 'Hypertext Markup Language', '2019-02-20'),
(114, 'Hyperresonant Marginal Logrithm', '2019-02-20'),
(115, 'JQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animation, and Ajax. It is free, open-source software using the permissive MIT License. Web analysis indicates that it is the most widely deployed JavaScript library by a large margin.', '2019-02-20'),
(116, 'True', '2019-02-20'),
(117, 'False', '2019-02-20'),
(118, 'Personal Home Page', '2019-02-20'),
(119, 'Hypertext Preprocessor', '2019-02-20'),
(120, 'Pretext Hypertext Processor', '2019-02-20'),
(121, 'Preprocessor Home Page', '2019-02-20'),
(122, 'AJAX stands for Asynchronous JavaScript and XML. AJAX is a new technique for creating better, faster, and more interactive web applications with the help of XML, HTML, CSS, and Java Script. Ajax uses XHTML for content, CSS for presentation, along with Document Object Model and JavaScript for dynamic content display.', '2019-02-20'),
(123, 'Client side', '2019-02-20'),
(124, 'Server side', '2019-02-20'),
(125, 'Both', '2019-02-20'),
(126, 'None', '2019-02-20'),
(127, 'Cascading style sheets', '2019-02-20'),
(128, 'Creative style sheets', '2019-02-20'),
(129, 'Computer style sheets', '2019-02-20'),
(130, 'Colourful style sheets', '2019-02-20'),
(131, 'True', '2019-02-20'),
(132, 'False', '2019-02-20'),
(133, '<?php   ?>', '2019-02-20'),
(134, '<?  ?>', '2019-02-20'),
(135, '<%  %>', '2019-02-20'),
(136, '<script language=\"PHP\"></script>', '2019-02-20'),
(137, 'PHP is a recursive acronym for \"PHP: Hypertext Preprocessor\". PHP is a server side scripting language that is embedded in HTML. It is used to manage\r\ndynamic content, databases, session tracking, even build entire e-commerce sites.', '2019-02-20'),
(138, 'Client side', '2019-02-20'),
(139, 'Server side', '2019-02-20'),
(140, 'Both', '2019-02-20'),
(141, 'None', '2019-02-20'),
(142, 'A constant is a name or an identifier for a simple value. A constant value cannot change\r\nduring the execution of the script. By default, a constant is case-sensitive. By convention,\r\nconstant identifiers are always uppercase. A constant name starts with a letter or underscore,\r\nfollowed by any number of letters, numbers, or underscores. If you have defined a constant,\r\nit can never be changed or undefined.', '2019-02-20'),
(143, 'Out', '2019-02-20'),
(144, 'Write', '2019-02-20'),
(145, 'Echo', '2019-02-20'),
(146, 'Display', '2019-02-20'),
(147, '. (dot)', '2019-02-20'),
(148, '; (semicolon)', '2019-02-20'),
(149, '/ (slash)', '2019-02-20'),
(150, ': (colon)', '2019-02-20'),
(151, 'True', '2019-02-20'),
(152, 'False', '2019-02-20'),
(153, 'True', '2019-02-20'),
(154, 'False', '2019-02-20'),
(155, 'Echo (“Hello World”);', '2019-02-20'),
(156, 'Print (“Hello World”);', '2019-02-20'),
(157, 'Printf (“Hello World”);', '2019-02-20'),
(158, 'Sprintf (“Hello World”);', '2019-02-20'),
(159, '$add = $add', '2019-02-20'),
(160, '$add = $add +$add', '2019-02-20'),
(161, '$add = $add + 1', '2019-02-20'),
(162, '$add = $add + $add + 1', '2019-02-20');

-- --------------------------------------------------------

--
-- Table structure for table `tblDescriptiveAns`
--

CREATE TABLE `tblDescriptiveAns` (
  `DescAnsID` int(11) NOT NULL,
  `DescAns` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblDescriptiveAns`
--

INSERT INTO `tblDescriptiveAns` (`DescAnsID`, `DescAns`) VALUES
(1, 'A'),
(2, 'B'),
(3, 'C'),
(4, 'D'),
(5, 'F'),
(6, 'A'),
(7, 'A'),
(8, 'One line textbox'),
(9, 'Newerrazer'),
(10, 'Unboxing extract the value type from the object while boxing is implicit.and unboxing is explicit'),
(11, '#include<stdio.h>\r\n#include<conio.h>\r\nvoid main()\r\n{\r\nint i,n;\r\nchar str[20];\r\nprint(\"enter the string to reverse\");\r\n'),
(12, 'Interface are use to implement multiple inhertance and abstract is not a class..'),
(13, '2 types\r\n.cshtml\r\nand .vbhtml'),
(14, 'Viewdata is ditictonary of object that is deriverred from viewdata dictionary\r\nand view bag does not require typecasting'),
(15, 'Private member function can not be accesed'),
(16, 'Hiding of functions'),
(17, 'A structurre is a value type so it is stored on the stack.but a class is a reference type stored in heap.'),
(18, '.class can have method but structure cannot'),
(19, 'Abstaction is hiding implementation and showing its functionality.'),
(20, 'Unboxing extract value type from object while boxing is implicit.'),
(21, 'Newerrazor'),
(22, '#include<stdio.h>\r\nmain()\r\n{\r\nchar s[10],n;\r\ns[]=\"ACQUISCENT\";\r\nfor(int i=0;i<5;i++)\r\n{\r\n n=s[i];\r\ns[i]=s[9-i];\r\ns[9-i]=n;\r\n}\r\nputs(s);\r\n}'),
(23, 'Class can inherit more than one interface but not abstract  '),
(24, 'Protected member cannot be accessed from outside class.'),
(25, '#include <stdio.h>\r\n#include <string.h>\r\n \r\nint main()\r\n{\r\n   char arr[100];\r\n \r\n   printf(\"Enter a string to reverse\\n\");\r\n   gets(arr);\r\n \r\n   strrev(arr);\r\n \r\n   printf(\"Reverse of the string is \\n%s\\n\", arr);\r\n \r\n   return 0;\r\n} '),
(26, 'Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit. The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object. In the following example, the integer variable i is boxed and assigned to object o .\r\n\r\n\r\n\r\n'),
(27, 'PROTECTED data members or PROTECTED functions means data members and functions are allowed to use by the classes which are derived by the class where they are declared. A private member variable or function cannot be accessed, or even viewed from outside the class.'),
(28, 'There are two types of file extensions for razor views. They are: i) .cshtml : This file extension is used, when the programming language is a C#. ii) .vbhtml : This file extension is used, when the programming language is a VB.'),
(29, 'ViewData and ViewBag are used for the same purpose -- to transfer data from controller to view. ViewData is nothing but a dictionary of objects and it is accessible by string as key. ViewData is a property of controller that exposes an instance of the ViewDataDictionary class. ViewBag is very similar to ViewData.'),
(30, 'Abstraction is selecting data from a larger pool to show only the relevant details to the object. It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using Abstract classes and interfaces. It is one of the most important concepts of OOPs.\r\n\r\n'),
(31, ' ASPX view engine '),
(32, 'The main difference between them is that a class can implement more than one interface but can only inherit from one abstract class.'),
(33, ' A  text box an empty Molecule should be created first. The Molecule has an MDocument attribute to which a MTextBox object can be set. If the MDocument object is null, it should be created first.'),
(34, 'A class has all members private by default while a struct is a class where members are public by default.'),
(35, 'Class is reference type where struct store on stack, class class store heap on memory, structure contain only data member and member function'),
(36, '.cdhtml while programming language is c# and .vbhtml while programming language is visual basis.'),
(37, 'RAZOR VIEW in  MVC'),
(38, 'Abstraction is showing only relevant data from pool of data example.man while driving a car only need to know controls and not internal working of car.'),
(39, 'String var;\r\nvar= textBox1.Text;'),
(40, 'The protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions, except a child class within the same application.'),
(41, 'Main difference is methods of a Java interface are implicitly abstract and cannot have implementations. A Java abstract class can have instance methods that implements a default behavior'),
(42, 'Unboxing extracts the value type from the object.\r\nBoxing is implicit.'),
(43, 'A Class has all members private by default. \r\nA struct is a class where members are public by default. '),
(44, 'A text box, text field or text entry box is a graphical control element intended to enable the user to input text information to be used by the program.\r\nExample - user id box and password box.'),
(45, 'Abstraction is the act of representing essential features without including the background details or explanations. '),
(46, 'ViewData is a dictionary of objects that is derived from ViewData Dictionary class and is accessible using strings as keys.\r\nViewBag is a dynamic property that takes advantage of the new dynamic features in C# 4.0.'),
(47, 'In Razor view .cshtml extension is used.'),
(48, 'ASPX View Engine is the default view engine for the ASP.NET MVC that is included with ASP.NET MVC from the beginning.'),
(49, 'It provide protection towards the critical data.'),
(50, 'A structure is a value type so it is stored in stack but class is refrenence type so it is stored on a heap'),
(51, '.cshtml  this application is use in c#, .vphtml this application is use in VB'),
(52, '1.Interface support multiple inheritence ,abstract  class does not support multiple inheritence \r\n2. Interface doesnt contains data members, abstract class contains data members'),
(53, 'View data is a dictionary of  object that derived from vie data dictionary class and assembel using string as akey  view data requires the type caste for complex data type and check for null value to avoid error'),
(54, 'Abstration is to abstract or hide the data implementation and just available the functionality to outside users'),
(55, 'Razer view'),
(56, 'In viewbag it is dynamic property. it does not need to be typecast, it use the variables attributes like object for eg.. Viewbag.username=\"mahesh\"\r\nIn Viewdata it requires typecasting, we use the variables attributes like index key for \r\neg.. Viewdata[\"username\"]=\"mahesh\"'),
(57, 'For( int i=0;i<str.length;i++ ){\r\nString t=str[i];\r\nstr[i]=str[str.length]\r\n}'),
(58, '@Html.Textbox()'),
(59, 'Viewbag takes advantage of new dynamic features and viewdata is dictionary of objects'),
(60, 'View engine is responsible for rendering the view in HTML form to the browser'),
(61, 'Class is reference type and stored on the heap whereas Struct is value type and stored on the stack.'),
(62, '.vbhtml'),
(63, 'The process which makes relevant information visible is called abstraction.This can be achieved by using abstract classes in c#.'),
(64, 'Class can implement more than one interface but only inherit from one abstract class. Interface is collection of abstract classes. '),
(65, 'You add code to a page using @ character'),
(66, '#include<stdio.h>\r\n#include<conio.h>\r\nint main(){\r\nchar arr[100];\r\nprintf(\"Enter a string\");\r\ngets(arr);\r\nstrrev(arr);\r\nprintf(\"Reverse of string is \\n%s\\n\",arr);\r\nreturn 0;\r\n}'),
(67, 'Abstraction is take key essential value and ignoring rest of them'),
(68, 'Razor view Engine and Web forms view'),
(69, 'Abstract class use in only in that class and the interface is use in another class.'),
(70, 'Viewdata is a  dictionary object\r\n viewbag is dynamic property'),
(71, 'The class has all members are private by default.\r\nstruct is class where members are public by default'),
(72, 'Unboxing extracts the values type from the object.\r\nboxing is implicit'),
(73, 'A text entry box is graphical control element\r\nintended to enable the user to input text information to be used by program\r\nexample user id n password are used as textbox'),
(74, 'Protected variable are does not use by any other unauthorised use'),
(75, 'Boxing is aprocess of converting a value type to the type object or to any interface type.\r\nExample: int i = 123;\r\nobject o =(object )i;  // explicit boxing\r\nUnboxing is an explicit conversion from the type to a value type or from an interface type\r\nExample : \r\nint i = 123;\r\nobject o = i;  //boxing\r\nint j =(int) o;  //unboxing'),
(76, 'The protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions, except a child class within the same application.'),
(77, 'Abstraction is selecting of data from a larger pool to show any relevant details to the object.'),
(78, 'There are two types of file extensions for razor views. \r\n1) .cshtml - This file extension is used when programming language is C#\r\n2)  .vbhtml - this file extension is used when programming language is VB'),
(79, 'Viewdata is s dictionary of objects that is derived from Viewdatadictionary class and is accesible using string as keys.\r\nViewbag doesnt require any typecasting for complex data type.'),
(80, 'ASPX view engine is default view engine in asp.net mvc.'),
(81, 'Molecule mol = new Molecule();\r\nMDocument md = mol.getDocument();\r\nif (md == null) {\r\n    md = new MDocument(mol);\r\n}\r\nMTextBox textBox = new MTextBox();\r\nmd.addObject(textBox);'),
(82, 'A structure is a value type so it is stored on stack, but class is a reference type and is stored on heap.'),
(83, 'Abstraction : Hiding the internal implementation of feature and only showing the functionality to the users.\r\nInterface : An interface can have asbtract methods.'),
(84, '.cshtml , .vbhtml'),
(85, 'Excel'),
(86, 'Unboxing gets the value type from the object'),
(87, 'Methods of abstract class are hidden and we cannot implement on them. interface is a collection of abstract methods'),
(88, 'Razor engine'),
(89, 'Viewdata is dictionary of objects from the viewdatan class , viewbag takes new dynamic features'),
(90, 'A structure is like value so it is stored in stack and a class is stored on heap . all struct members are public nut classes are private'),
(91, 'Abstraction is hiding of data. the internal data is hidden only the fuctionality can be seen. '),
(92, 'View data is a dictionary of object that is derived from viewdatadictionary class.  \r\nviewbag is a dynamic property that takes advantage of the new new dynamic features in c#'),
(93, 'This functions allows to use by the classes which are derived by the class where they are declared. '),
(94, 'Boxing is use to convert a value type to object type.\r\nunboxing use to convert object to value type.'),
(95, 'View engine is responsible for rendering the view into html form to browser.'),
(96, 'Viewbag take advantage of new dynamic feature and viewdata is dictionary of objects.'),
(97, '.vbhtml'),
(98, 'Representing feature  without including background details. abstraction use to hide your data and member from outside world.'),
(99, 'Struct is value type so it is store on the stack but class is reference type and is stored on the heap.'),
(100, 'Abstract class not provided full abstraction but interface provide full abstraction.'),
(101, 'Class is reference and it is stored on heap. Class support to inheritance. Struct is value type so it is store on stack. It does not support to the inheritance.'),
(102, 'Excel'),
(103, 'It is hiding of the data.'),
(104, 'Razor engine'),
(105, 'Methods of abstract class are hidden and we can not implement on them. Interface is collection of abstract methods and it is similar to clas.'),
(106, 'Viewdata is dictionary of objects from the viewdata class viewbag takes new dyanamic  features.'),
(107, 'Boxing is implicit and unboxing is explicit and it extract the value type from object.'),
(108, '.cshtml, .vbhtml'),
(109, 'It allowed to use by the classes '),
(110, ' An int value can be converted to object and back again to int. This shows both boxing and unboxing. When a variable of a value type needs to be converted to a reference type, an object box is allocated to hold the value, and the value is copied into the box. Unboxing is just the opposite.'),
(111, 'Razor engine'),
(112, 'This very space where I am typing is an simple example of a textbox.'),
(113, '#include<stdio.h>\r\nint main()\r\n{\r\nchar a[10],temp;\r\nscanf(\"%s\",a);\r\nfor(int i=0;i<5;i++)\r\n{\r\ntemp=a[i];\r\na[i]=a[9-i];\r\na[9-i]=temp;\r\n}\r\nprintf(\"%s\",a);\r\nreturn 0;\r\n}'),
(114, 'Abstraction is used to hide the data and make sure that user knows only the amount of data he is supposed to know. It hides things like abstract classes etc.'),
(115, 'Only its child can access the data'),
(116, 'Cshtml for c# and vshtml for vbscript'),
(117, 'Member variable and methods are public in struct and private in class'),
(118, 'We can implement an abstract class and can not implement interface.'),
(119, 'Viewbag needs typecasting and viewdata does not require it'),
(120, 'The protected internal access speciffers allows the class to hide its member variable and member function from  other cl '),
(121, 'Abstract class  does not support multiple inheritance and Interface support multiple Inheritance.'),
(122, 'ViewData is dictionary of objects that is derived from the ViewDataDictonary class and is accesible using string and keys. It requires typecastin for complex data types.\r\nViewBag doesnt require typecasting for complex data type.'),
(123, 'Abstraction is a process of hiding the implementation details from the user only the authorized user can see it.'),
(124, 'Class can provide the flexibility of combing data and methods and provide the usability called inheritance\r\nStruct is typically grouping grouping data and does not support Inheritance.'),
(125, '#include<stdio.h>\r\n#include<conio.h>\r\nmain()\r\n{\r\nint '),
(126, 'Unboxing extracts the value type from the object. An object is stored on heap memory is copied to the stack memory .\r\nIn Boxing an objects is made to refer as a value type  '),
(127, 'For(int i = str.length()-1;i>=0;i++)\r\n{\r\nReverse = reverse + str.charAt(i);\r\n}\r\nprintf(\"Reverse string is\",reverse);'),
(128, '1) class support inherit parent properties while struct does not support inheritance.\r\n2) class has all the members private by default while struct has all members public by default.'),
(129, 'MTextbox'),
(130, 'Internal is default if no access modifier is specified. Struct member including nested classes and struccts can be declared as public, internal or private.'),
(131, 'Abstraction where only essentials details are available to user. A real life example is a man driving a car.'),
(132, '1).cshtml\r\n2).vbhtml'),
(133, 'Viewdata is a dictionary of any object which is derived from ViewDataDictionary.\r\nViewBag does not require typecasting for complex data while viewdata require typecasting.\r\nViewbag and viewdata are used to communicate between controller and corresponding view.'),
(134, '1)Interface are implicitly abstract and cannot have implementations.\r\n   While an abstract class have instance method that implements a default behaviour.\r\n2)variables declared in java interfaces is by default final while abstract class may contain non-final variables.'),
(135, 'Razor view Engine'),
(136, 'Entering email in email field on gmail'),
(137, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char mystr[50];\r\n	int len, i;\r\n		\r\n	\r\n    printf(\"Enter a string: \");\r\n   	\r\n	//get the input string from the user\r\n	scanf(\"%s\", mystring);\r\n	len = strlen(mystring);\r\n	for(i=len-1; i>=0; i--){\r\n		printf(\"%c\", mystr[i]);	\r\n	}\r\n    return 0;\r\n}'),
(138, 'Abstraction is hiding the inner data from the out side world.'),
(139, 'Protected keyword is member access specifier.'),
(140, 'File.vbhtml'),
(141, 'Class : class can create subclass that can inherit the properties of parent class.\r\nStruct :  it does not support the inheritance.'),
(142, 'Abstract can have instant methods and implementation while interface dont support them. Interface is final and abstract can have non final variables.'),
(143, 'The protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions, except a child class within the same application'),
(144, 'Viewbag doesnot need typcasting for complex data unlike view bag.'),
(145, 'The feild where we can input text data. Example: name feild in a Hotel booking registeration form.'),
(146, 'Abstraction is showing only relevant data from the pool of data. Example, for example man while driving a car only need to know controls and not the internal working of car.               '),
(147, '.cshtml for C#'),
(148, 'Razor View'),
(149, 'Main difference between both is accessibility of member variables. In struct public while in class it is private'),
(150, '.cshtml '),
(151, 'Razor View Engine'),
(152, 'Process of selecting data from the large entities to show only relevant details to the object. '),
(153, 'Class can creat subclass and inherites the data but struct cant inherite '),
(154, '#include<stdio.h>\r\nInt main()\r\n{\r\nint i;\r\nchar s[10],swap;\r\nscanf(\"%s\",s);\r\nfor(i=0;i<5;i++)\r\n{\r\nswap=s[i];\r\ns[i]=s[9-i];\r\na[9-i]=swap;\r\n}\r\nputs(s);\r\nreturn 0;\r\n}'),
(155, 'Member variable and methods are private in class but public in struct'),
(156, 'Cshtml for c# and vshtml for vbscript'),
(157, 'Razor engine is the default view engine in ASP.NET'),
(158, 'Protected class hides the member variables and member methods from all the other classes except the child class of it.'),
(159, 'Text box is the area given for any answer for any question'),
(160, 'Abstraction is hiding the definitions and defines the method name in abstract class'),
(161, 'An Abstract class can be implemented but interface cannot be implemented. Variables in interface are final whereas variables in abstract has non-final variable.'),
(162, 'When we use it in c# then it having extension \".cshtml\" and when we use it in vb then it has \".vbhtml\"'),
(163, 'Class is the collection of object. for calling class we have to use it as method calling. and for structure use in other class we have one attribute. like example.. structure{}s. we will use it \"s\" for structure use or representation.'),
(164, 'Razor MVC'),
(165, 'Textbox1.txt=\"ACQUISCENT\";\r\nstring arr1[20]=Textbox1.txt;\r\nstring arr2[20];\r\nfor(i=1;i<=arr1.length;i++)\r\n{\r\nfor(j=arr2.length;j>=0;j--)\r\n{\r\narr2[j]=arr1[i];\r\n}\r\n}'),
(166, 'Viewdata is dictionary of objects which takes data from viewdatadictionary and viewbag is dynamic property which takes advantage of c#4.0'),
(167, 'Textbox1.txt=\"ACQUISCENT\";'),
(168, '.cshtml & .vbhtml'),
(169, 'Class can create subclass  which will inherit properties  but struct does not support inheritance.'),
(170, 'Abstraction is the process of selecting only the required data which is required and important for the object.'),
(171, 'Rozor view engine'),
(172, 'Razor is the view engine in MVC. It is responsible for rendering the view into html form to the browser. '),
(173, 'Class can create subclass that allows inheritance whereas structure doesnot allow inheritance.\r\nClass is used for reference type and structure is used for value type.\r\nThe members of class are protected by default whereas members of structure are public by default.'),
(174, 'Abstraction means to display only essential information to the user. It is the process of identifying the required characteristics of an object ignoring the the irrelevant ones.'),
(175, 'Viewdata is dictionary of objects and is accessible by string as key.\r\nViewbag is wrapper around the viewdata.'),
(176, 'Abstract class doesnot support multiple inheritance whereas interface supports multiple inheritance.\r\nAbstract class can have final,non-final,staticand non-static variables whereas interface has only static and final variables.Abstarct class can be extended using the keyword \"extends\" and interface by using \"implements\".'),
(177, 'There are two file extensions:\r\n1) .cshtml\r\n2).vbhtml'),
(178, 'It allows the child class to access the member variables and member functions of its base class'),
(179, 'Abstraction basically hides the definition of the method and just defines the method names in abstract classes. Abstract class has method abstract methods. Abstract methods are defined in the classes where they are used.'),
(180, 'Abstract class can have normal methods and abstract methods both and interface can only have methods names.'),
(181, 'The space given to us for writing the answer is the example of textbox.'),
(182, '#include<stdio.h>\r\nmain()\r\n{\r\nchar s[10]=\"ACQUISCENT\";\r\nint i,j,t;\r\nfor(i=0,j=9;i<5;i++,j--)\r\n{\r\nt=s[i];\r\ns[i]=s[j];\r\ns[j]=t\r\n}\r\nputs(s);\r\n}'),
(183, 'View Engine'),
(184, 'Extension is .cshtml in C#'),
(185, 'Protected class hides the member variables and member methods from all the other classes except the child class of it.'),
(186, '1).cshtml-it is used when the programming language is c#\r\n2).vbhtml-it is used when the programming language is VB'),
(187, 'Abstraction is selecting data from larger pool to show only the relevant details to the object.'),
(188, '1)viewdata is nothing but dictionary of objects and it is accessible by string as key.It is a property of controller that exposes an instance of the viewDataDictionary class.\r\n2)viewbag is dynamic property which able to add any number of additional field without converting it to strongly used.'),
(189, 'A class has all members private by default\r\nA structure is a class where member are public by default.'),
(190, '1)The process of converting a value type into reference type is called boxing.\r\n2)The process of converting reference type into the value type is called unboxing.'),
(191, '</textarea>\r\n<input type=\"submit\" value=\"submit\">\r\n</form>'),
(192, 'Abstraction defines an object in terms of its properties, functionality, and interface (means of communicating with other objects). '),
(193, 'Molecule mol = new Molecule();\r\nMDocument md = mol.getDocument();\r\nif (md == null) {\r\n    md = new MDocument(mol);\r\n}\r\nMTextBox textBox = new MTextBox();\r\nmd.addObject(textBox);'),
(194, 'ViewData is a dictionary of objects that is derived from ViewDataDictionary class and is accessible using string s as keys. \r\nViewData requires typecasting for complex data type and check for null values to avoid error.\r\n'),
(195, 'The protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions, except a child class within the same application.'),
(196, '1)Java interface are implicitly abstract and cannot have implementations. \r\n1)A Java abstract class can have instance methods that implements a default behavior.\r\n2)Variables declared in a Java interface is by default final.\r\n2)An abstract class may contain non-final variables.'),
(197, 'Boxing and unboxing example:\r\nInt i = 123\r\nObject o=i\r\no = 123;\r\ni = (int)o; '),
(198, 'The razor view engine in MVC. The view engine responsible for the view into HTML from to browser.'),
(199, '. cshtml\r\n. vbhtml'),
(200, 'CLASS :\r\n1)Class is a reference type and its object is created on the heap memory.\r\n2)Class can inherit the another class.\r\nSTRUCT:\r\n1)Structure is a value type that is why its object is created on the stack memory.\r\n2)Structure does not support the inheritance.'),
(201, 'View data is a dictionary of objects that is derived from viewdatadictionary class and is accessible using strings as keys.\r\nview bag is dynamic property that takes advantage of new dynamic features in c# 4.0.\r\nview data requires typecasting for complex data type and check for null values to avoid error.\r\nview bag doesnt require typecasting for complex data type.'),
(202, 'Abstraction is the process of identifying common patterns that have systematic variations,an abstraction represents the common pattern and provides a means for specifying which variation to use.'),
(203, 'Unboxing extracts the value type from the object.\r\nboxing is implicit,unboxing is explicit.\r\n'),
(204, '.cshtml\r\n.vbhtml'),
(205, 'Text box is used to enter some text on the web form application .\r\nfor ex:\r\nName: to enter the name of specific user we use text box.'),
(206, 'Interface is not a class.\r\nclass can implement more than one interface but can only inherit from one  abstract class.\r\ninterface are used to implement multiple inheritance.'),
(207, '.cshtml\r\n.vbhtml'),
(208, 'Boxing is the process of converting a value type to the type object or to any interface type implemented by this value type. When the CLR boxes a value type, it wraps the value inside a System.Object and stores it on the managed heap. Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit.'),
(209, 'Private Member can not be access.'),
(210, 'Main difference is methods of a Java interface are implicitly abstract and cannot have implementations. A Java abstract class can have instance methods that implements a default behavior. '),
(211, 'ViewData is a dictionary of objects that is derived from ViewDataDictionary class and accessible using strings as keys. ViewBag is a dynamic property that takes advantage of the new dynamic features in C# 4.0. ViewData requires typecasting for complex data type and check for null values to avoid error. ViewBag doesn’t require typecasting for complex data type.'),
(212, 'Abstraction means hiding of data or information. Abstraction is the act of representing essential features without including the background details or explanations.'),
(213, '#include <stdio.h>\r\n \r\nint main()\r\n{\r\n   int n, reverse = 0;\r\n \r\n   printf(\"Enter a number to reverse\\n\");\r\n   scanf(\"%d\", &n);\r\n \r\n   while (n != 0)\r\n   {\r\n      reverse = reverse * 10;\r\n      reverse = reverse + n%10;\r\n      n       = n/10;\r\n   }\r\n \r\n   printf(\"Reverse of entered number is = %d\\n\", reverse);\r\n \r\n   return 0;\r\n}'),
(214, 'THE RAZOR VIEW ENGINE IN MVC. View Engine is responsible for rendering the view into html form to the browser. ASP.NET MVC includes two different view engines, the newer Razor View Engine and the older Web Forms View Engine. The Razor view was introduced with ASP.NET MVC 3 and is the default view engine moving forward.'),
(215, 'The only difference between a struct and class in C++ is the default accessibility of member variables and methods. In a struct they are public; in a class they are private.'),
(216, 'Molecule mol = new Molecule();\r\nMDocument md = mol.getDocument();\r\nif (md == null) {\r\n    md = new MDocument(mol);\r\n}\r\nMTextBox textBox = new MTextBox();\r\nmd.addObject(textBox);'),
(217, 'A structure is a value type so it is stored on the stack while class is reference type stored in heap.'),
(218, 'Hiding of data,functions'),
(219, 'Viewdata is dictionary of object that is derived from viewdata dictionary and view bag does not require typecasting'),
(220, 'Interfaces are use to implement inheritance and abstract is not a class.interface supports multiple inheritance and abstract does not support multiple inheritance'),
(221, 'One line textbox'),
(222, 'Private member function can not be accesed.protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions.'),
(223, 'Two types:-.cshtml and.vbhtml'),
(224, 'Unboxing extract value type from object while boxing is implicit and unboxing is explicit'),
(225, 'Newerrazer'),
(226, 'Hiding the internal implemention of the feature and shows the functionality to the user'),
(227, 'I allows to use by the classes which are derived by the classes where they are derivedts'),
(228, 'Viewbag is adynamic property  that take advantage in new dynamic property in c#\r\nViewdata is a dictionary of object '),
(229, 'Boxing  is  use to convert  a value type to object type\r\nand unboxing use to convert object type to value type\r\n'),
(230, 'Viewbag\r\n1. Used to pass data from controller to respective view.\r\n2. Available for current request only.\r\n3. If redirection occurs, then its value become null.\r\n\r\nViewdata\r\n1. Use to pass data from controller view.\r\n2. Available for current request only. \r\n3. If redirection occurs, then its value become null.'),
(231, 'TextBox.Text = \"http://mvc information.com\".'),
(232, '.cshtml : This file extension is used to, when the programming language is a c#.\r\n.vbhtml : This file extension is used, when the programming language is a Virtual Basic.'),
(233, 'Abstract Class\r\n1. Can have abstract and non abstract methods.\r\n2. Doesn\'t support multiple inheritance.\r\n3. Can provide the implementation of interface. \r\n\r\nInterface\r\n1. Can only have abstract method.\r\n2. Can support multiple inheritance.\r\n3. Can\'t provide implementation of abstract class.\r\n'),
(234, 'Boxing is used to store value types in the garbage-collected heap.\r\nExample: \r\nclass TestBoxing\r\n{\r\nstatic void Main()\r\n{\r\nint i = 123;\r\nobject o = i;\r\ni = 456;\r\nSystem.Console.WriteLine(\"The value-type value = {0}\", i);\r\nSystem.Console.WriteLine(\"The value-type value = {0}\", o); \r\n}\r\n}'),
(235, 'Razor mvc is the default view engine in ASP.NET MVC.\r\nRazor mvc is hyper responsive, robust and contains feature like dyanamic view loading.'),
(236, 'Razor view extensions are .cshtml or .vbhtml'),
(237, 'Char name1[10] =  \"ACQUISCENT\";\r\n\r\nint length = sizeOf(name1)\r\nfor(int i= length; i>0; i--){\r\nprintf(\"%c\",name[i]) ;\r\n}'),
(238, 'Import java.lang.*;\r\nimport java.io.*;\r\nimport java.utile.*\r\nclass ReverseString\r\n{\r\npublic statice void main(String[] args)\r\n{\r\n String inpute =\"ACQUISCENT\";\r\nbyte [] strAsByteArray =input.getBytes();\r\nbyte [] result =new byte [strAsByteArray.length];\r\nfor(int i=0; i<strAsByteArray.length; i++)\r\nresult [i] =strAsByteArray[strAsByteArray.length-i-1];\r\nSystem.out.println[new String(result));\r\n}\r\n}'),
(239, 'Private member function can not be accesed'),
(240, 'Newerrazer'),
(241, '.cshtml,.vbhtml'),
(242, 'One line text box'),
(243, 'Struct is value type where as class are referance type'),
(244, 'View data requires typecasting for complex data type and view bag doesnt require typecasting foe complex data'),
(245, 'Boxing ids implicit while unboxing is emplicit'),
(246, ' typein java we use abstract class and interface to achive abstraction'),
(247, 'Molecule mol = new Molecule();\r\nMDocument md = mol.getDocument();\r\nif (md == null) {\r\n    md = new MDocument(mol);\r\n}\r\nMTextBox textBox = new MTextBox();\r\nmd.addObject(textBox);\r\n '),
(248, 'Class is collection of objects and structure is representation of the problem or statement.'),
(249, ' Variables declared in a Java interface is by default final. An abstract class may contain non-final variables.'),
(250, 'ViewData is a dictionary of objects that is derived from ViewDataDictionary class and accessible using strings as keys. ViewBag is a dynamic property that takes advantage of the new dynamic features '),
(251, 'NEWERAZOR'),
(252, 'Private member cannot be accessed'),
(253, 'Abstarction means hiding the data or information.Abstraction means displaying only essential information and hiding the details. '),
(254, '.cshtml and .vbhtml'),
(255, 'In Boxing object is made to refer as the value,the value is stored on the stack  and copy the object stored on heap memory,in boxing there are implicit conversion.\r\nexample: int n ;\r\n               object ob=n;\r\n\r\nIn Unboxing,it is process of retrive the value from the boxed object,the value of object stored on the heap memory and copy the value on stack,\r\nIt is explicit Conversion\r\nex: int m = (int ) ob; '),
(256, 'We simply used for all purpose login ,we enter userid and password is best example of textbox.'),
(257, 'Protected member of a base class is acessible in derived class only and if the accsess occured through the derived class type .struct member cannot be protected because the struct cannot   be inherited.'),
(258, 'The  viewbag and viewdata are   used for same  purpose.used for transfer data from controller to view.'),
(259, 'Hiding of function '),
(260, 'We  cannot use  '),
(261, 'Class can create subclass that inherit properties of parent class and struct does not support  inheritance.'),
(262, 'File.vbhtml'),
(263, 'Razor view and web form view'),
(264, '#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n	char mystring[50];\r\n	int len, i;\r\n		\r\n	\r\n	printf(\"C Program to reverse a string\\n\");\r\n    printf(\"Enter a string: \");\r\n   	\r\n	\r\n	scanf(\"%s\", mystring);\r\n	\r\n	\r\n	len = strlen(mystring);\r\n	\r\n	\r\n	for(i=len-1; i>=0; i--){\r\n		printf(\"%c\", mystring[i]);	\r\n	}\r\n    return 0;\r\n}'),
(265, 'Struct are value type and class are refrence type'),
(266, 'To abstact or hide data and member from outside the world for unauthorized access '),
(267, '.cshtml'),
(268, 'Interface can be extended another java inteface only.\r\nAbstact class can be extended another java class and implemented multiple java interface'),
(269, 'For(int i =0;i<str.length/2;i++ )\r\n{\r\nString a=str[i];\r\nstr[i]=str[str.length-i];\r\nstr[str.length-i]=a;\r\n}'),
(270, 'Boxing is process of converting any value type into object referencece type\r\nUnboxing convert the refrence type to value type\r\n'),
(271, 'In Class'),
(272, 'Viewdata  is a dictionary of object that derives from viewdatadictionary.it requires typecasting it access the variable using index key eg. Viewdata[\"variablename\"]=\"priti\"\r\nViewbag=it is dynamic property it doesn\'t need to be typecast.it uses object like eg. Viewbag.username=\"priti\"'),
(273, 'Razor'),
(274, '@Html.Textbox()'),
(275, 'The default view engine is ASP.NET MVC is Razor.'),
(276, 'Class can create sub class that will inhereted the property of parent class where as the structure does not support the inheritance.'),
(277, 'ViewData is a dictionary of objects that is derived from ViewDataDictionary class and is accessible using string s as keys. ViewData requires typecasting from complex data type and check for null values to avoid error where as ViewBag doesn\'t require typecasting for complex data type.'),
(278, 'TextBox1.Text = \"HI\";'),
(279, 'It means data members and functions are allowed to use by the classes which are derived by the class where they are declared.'),
(280, 'Abstract class may content non-final variables where as in interface variables declared in a java interface is by default final.'),
(281, 'Abstraction is hiding the main implementation and only showing the upper process.'),
(282, 'Boxing the program convert the value type to the type object or to any interface type implemented by this value type.'),
(283, '.cshtml, .vbhtml'),
(284, 'Abstract class:-Its contain data member and constructor\r\nInterface:-Its does not contain data member and constructor\r\nAbstract class:-its does not support multiple inheritance\r\nInterface:-its support multiple inheritance\r\nAbstract class:-its cointain access modifier\r\ninterface:-its not contain access specifier'),
(285, 'Boxing:-The process of convertinga data type toreference type or object .\r\nBoxing is implicit conversion process .\r\nvalue type is always stored in Stack.\r\nExample:int num=4;\r\nObject obj=num;\r\nUnboxing:its the process of converting reference into data type.\r\nits used explicite conversion process.\r\nExample: int n=5;\r\nobject obj=n;\r\nint i=(int) obj;\r\n'),
(286, 'Class:Its group of common object that share common properties\r\nclass member are private by default\r\nClass refernce store in Heap\r\nStruct:\r\nits collection of diffetent type of data type\r\nStrct data type does not set by deafault\r\nits reference sore in Stack'),
(287, 'Razor'),
(288, 'ViewData is dictionary of object that derived from ViewdataDictionary class and accessible using string  s as key where viewdata requires typecasting from complex data type and check null values to avoid errors\r\nViewBag: viewbag does not require type casting for complex data type.'),
(289, 'Its allowed to used by classes which drived by class where they are declair.\r\ndoes not access outdide class'),
(290, 'Exel'),
(291, 'Abstraction is hinding a data or information\r\nhide implementation detail'),
(292, ' .cshtml, .vbhtml '),
(293, 'Multiple line text area box'),
(294, 'Viewbag is dictionary of objects viewdata is a property of controller that expose and instance of viewdata'),
(295, 'It is responsible for rendering the viewinto html form to the browser'),
(296, 'Class are reference type stored as heap memory struct are stored as stack on memory'),
(297, 'It is a member access modifier'),
(298, 'Razor is amarkup syntax that lets you embed server based code into web pages'),
(299, '// Java program to ReverseString using ByteArray. \r\nimport java.lang.*; \r\nimport java.io.*; \r\nimport java.util.*; \r\n  \r\n// Class of ReverseString \r\nclass ReverseString \r\n{ \r\n    public static void main(String[] args) \r\n    { \r\n        String input = \"GeeksforGeeks\"; \r\n  \r\n        // getBytes() method to convert string  \r\n        // into bytes[]. \r\n        byte [] strAsByteArray = input.getBytes(); \r\n  \r\n        byte [] result =  \r\n                   new byte [strAsByteArray.length]; \r\n  \r\n        // Store result in reverse order into the \r\n        // result byte[] \r\n        for (int i = 0; i<strAsByteArray.length; i++) \r\n            result[i] =  \r\n             strAsByteArray[strAsByteArray.length-i-1]; \r\n  \r\n        System.out.println(new String(result)); \r\n    } \r\n}'),
(300, 'Unboxing extractx value type from the object and boxing is implicit unboxing is explicit'),
(301, 'Abstraction is selecting data from larger pool'),
(302, 'Abstract class can have instance methods that implement default behaviour  interface are implicity abstract'),
(303, 'Class Passing by reference and struct passing by value.\r\nclass not size specified and struct included size of elements'),
(304, 'Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit. The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object. In the following example, the integer variable i is boxed and assigned to object o'),
(305, '#include <stdio.h>\r\n#include <string.h>\r\n \r\nint main()\r\n{\r\n   char arr[100];\r\n \r\n   printf(\"Enter a string to reverse\\n\");\r\n   gets(arr);\r\n \r\n   strrev(arr);\r\n \r\n   printf(\"Reverse of the string is \\n%s\\n\", arr);\r\n \r\n   return 0;\r\n}#include <stdio.h>\r\n#include <string.h>\r\n \r\nint main()\r\n{\r\n   char arr[100];\r\n \r\n   printf(\"Enter a string to reverse\\n\");\r\n   gets(arr);\r\n \r\n   strrev(arr);\r\n \r\n   printf(\"Reverse of the string is \\n%s\\n\", arr);\r\n \r\n   return 0;\r\n}'),
(306, 'There are two types of file extensions for razor views. They are: i) .cshtml : This file extension is used, when the programming language is a C#. ii) .vbhtml : This file extension is used, when the programming language is a VB'),
(307, 'In this example MarvinBeans API is used to create a MTextBox containing formatted text.\r\nMolecule mol = new Molecule();\r\nMDocument md = mol.getDocument();\r\nif (md == null) {\r\n    md = new MDocument(mol);\r\n}\r\nMTextBox textBox = new MTextBox();\r\nmd.addObject(textBox);\r\n textBox.getTextDocument();'),
(308, 'The protected internal access specifier allows a class to hide its member variables and member functions from other class objects and functions, except a child class within the same application.'),
(309, 'THE RAZOR VIEW ENGINE IN MVC. View Engine is responsible for rendering the view into html form to the browser. ASP.NET MVC includes two different view engines, the newer Razor View Engine and the older Web Forms View Engine. The Razor view was introduced with ASP.NET MVC 3 and is the default view engine moving forward'),
(310, 'Interface support multiple inheritance and abstract not supprted\r\ninterface does not  content data members and abtract content data members\r\n'),
(311, 'Abstraction is selecting data from a larger pool to show only the relevant details to the object. It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using Abstract classes and interfaces. It is one of the most important concepts of OOPs.'),
(312, 'It\'s a communication mechanism within the server call. Difference between ViewBag & ViewData: ViewData is a dictionary of objects that is derived from ViewDataDictionary class and accessible using strings as keys. ViewBag is a dynamic property that takes advantage of the new dynamic features in C# 4.0.'),
(313, '.cshtml & .vbhtml'),
(314, 'Abstract class has many static fields and methods. &  Interface contains constants, static methods.'),
(315, 'Viewbag is used to transfer data & Viewdata is used to control data'),
(316, 'Boxing convert value type into reference type. & UnBoxing convert reference type into value type'),
(317, 'Razor'),
(318, 'Class is a collection of onject & Struct'),
(319, 'Class'),
(320, 'Abstraction is a hide or abstract data or member from outside the world.\r\n'),
(321, 'The scope of the protected member variable are within the same class itself from where it is derived.\r\n'),
(322, 'Char name =\"ACQUISCENT\";\r\nint I;\r\nint length= sizeOf(name1)\r\nfor(I=length; I>0; I--){\r\nprintf(\"%c\",name[i]);\r\n}\r\n\r\n'),
(323, 'RAZOR MVC is the default view engine .It is responsible for rendering the view in html form to browser.\r\nRazor mvc is highly responsive and dynamic.'),
(324, 'Razor view extensions are .cshtml and .vbhtml.'),
(325, 'A Class is blueprint where user variables are created with reference type where as Struct is value type. Class Supports inheritance and Struct does not supports inheritance.'),
(326, 'The box in which i am writing answers now on the form is the example of textbox.The textbox are used for writing the text in designing in asp.net.'),
(327, 'Unboxing in C# extracts the value type from object on other hand boxing is implicit.'),
(328, 'Abstractions means implementing the important entities and ignoring the rest.It represents essential feature.'),
(329, 'Main difference is methods of a Java interface are implicitly abstract and cannot have implementations. A Java abstract class can have instance methods that implements a default behavior. Variables declared in a Java interface is by default final. An abstract class may contain non-final variables.'),
(330, 'Viewdata is dictionary of objects which initially represents the result of data which gets passed from the controller.\r\nViewbag is used to pass the data from controller to respective view.'),
(331, 'Abstract class does not support multiple inheritance while interference\r\nDoes support \r\n\r\nThe abstract keyword is used for declaring class while the interference keyword is used to declare interference'),
(332, 'Razor view engine which is the oldest one'),
(333, 'Abstraction means removing unecessary details which helps to reduce complexity of a program. '),
(334, 'Cs and vbhtml'),
(335, 'Abcd'),
(336, 'Defg'),
(337, 'A'),
(338, 'B'),
(339, 'True'),
(340, 'Use for animation'),
(341, 'Realtime approach'),
(342, 'A'),
(343, 'Javascript is scripting language'),
(344, 'Abcd'),
(345, 'A');

-- --------------------------------------------------------

--
-- Table structure for table `tblExamCoordinator`
--

CREATE TABLE `tblExamCoordinator` (
  `ExamCoordinatorID` int(11) NOT NULL,
  `EmailID` varchar(200) NOT NULL,
  `Password` varchar(200) NOT NULL,
  `DisplayName` varchar(200) NOT NULL,
  `AdminID` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblExamCoordinator`
--

INSERT INTO `tblExamCoordinator` (`ExamCoordinatorID`, `EmailID`, `Password`, `DisplayName`, `AdminID`) VALUES
(1, 'pratikshahh@acquiscent.com', 'admin', 'pratiksha', 3),
(2, 'abcd@gmail.com', '=@Bu^z,w', 'Exam Coordinator1', 3),
(3, 'defg@gmail.com', 'n(yqph+K', 'Exam Coordinator2', 3),
(4, 'abcd1@gmail.com', 'TSzy3sVG', 'Abcd', 3),
(5, 'Coordinator1@gmail.com', '*n3D?RJ#', 'Co-ordinator1', 5),
(6, 'Coordinator2@gmail.com', 'sv(H,r^q', 'Co-ordinator2', 5),
(7, 'satishshinde@acquiscent.com', 'satish', 'Satish', 28),
(8, 'ExamCoordinator1@gmail.com', '%e8_Lrfi', 'ExamCoordinator1', 28);

-- --------------------------------------------------------

--
-- Table structure for table `tblMultipleTypeQuesAssocAns`
--

CREATE TABLE `tblMultipleTypeQuesAssocAns` (
  `OptionAssocID` int(11) NOT NULL,
  `QuestionID` int(11) NOT NULL,
  `AnswerID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblMultipleTypeQuesAssocAns`
--

INSERT INTO `tblMultipleTypeQuesAssocAns` (`OptionAssocID`, `QuestionID`, `AnswerID`) VALUES
(1, 1, 1),
(2, 1, 2),
(3, 1, 3),
(4, 1, 4),
(5, 2, 5),
(6, 2, 6),
(7, 2, 7),
(8, 2, 8),
(9, 3, 9),
(10, 3, 10),
(11, 3, 11),
(12, 3, 12),
(13, 4, 13),
(14, 4, 14),
(15, 4, 15),
(16, 4, 16),
(17, 5, 17),
(18, 5, 18),
(19, 5, 19),
(20, 5, 20),
(21, 6, 21),
(22, 6, 22),
(23, 6, 23),
(24, 6, 24),
(25, 7, 25),
(26, 7, 26),
(27, 7, 27),
(28, 7, 28),
(29, 8, 29),
(34, 10, 34),
(35, 10, 35),
(36, 10, 36),
(37, 10, 37),
(46, 14, 46),
(47, 14, 47),
(48, 14, 48),
(49, 14, 49),
(50, 15, 50),
(51, 15, 51),
(52, 15, 52),
(53, 15, 53),
(54, 16, 54),
(55, 16, 55),
(56, 16, 56),
(57, 16, 57),
(58, 17, 58),
(59, 18, 59),
(60, 19, 60),
(61, 20, 61),
(62, 21, 62),
(63, 22, 63),
(64, 23, 64),
(65, 24, 65),
(66, 25, 66),
(67, 26, 67),
(68, 27, 68),
(69, 28, 69),
(70, 28, 70),
(71, 28, 71),
(72, 28, 72),
(73, 29, 73),
(74, 29, 74),
(75, 30, 75),
(76, 30, 76),
(77, 31, 77),
(78, 31, 78),
(79, 32, 79),
(80, 33, 80),
(81, 34, 81),
(82, 35, 82),
(83, 36, 83),
(84, 37, 84),
(85, 38, 85),
(86, 38, 86),
(87, 39, 87),
(88, 40, 88),
(89, 40, 89),
(90, 41, 90),
(91, 41, 91),
(92, 41, 92),
(93, 41, 93),
(94, 42, 94),
(95, 43, 95),
(96, 43, 96),
(97, 44, 97),
(98, 44, 98),
(99, 44, 99),
(100, 44, 100),
(101, 45, 101),
(102, 46, 102),
(103, 46, 103),
(104, 47, 104),
(105, 48, 105),
(106, 48, 106),
(107, 48, 107),
(108, 48, 108),
(109, 49, 109),
(110, 49, 110),
(111, 50, 111),
(112, 50, 112),
(113, 50, 113),
(114, 50, 114),
(115, 51, 115),
(116, 52, 116),
(117, 52, 117),
(118, 53, 118),
(119, 53, 119),
(120, 53, 120),
(121, 53, 121),
(122, 54, 122),
(123, 55, 123),
(124, 55, 124),
(125, 55, 125),
(126, 55, 126),
(127, 56, 127),
(128, 56, 128),
(129, 56, 129),
(130, 56, 130),
(131, 57, 131),
(132, 57, 132),
(133, 58, 133),
(134, 58, 134),
(135, 58, 135),
(136, 58, 136),
(137, 59, 137),
(138, 60, 138),
(139, 60, 139),
(140, 60, 140),
(141, 60, 141),
(142, 61, 142),
(143, 62, 143),
(144, 62, 144),
(145, 62, 145),
(146, 62, 146),
(147, 63, 147),
(148, 63, 148),
(149, 63, 149),
(150, 63, 150),
(151, 64, 151),
(152, 64, 152),
(153, 65, 153),
(154, 65, 154),
(155, 66, 155),
(156, 66, 156),
(157, 66, 157),
(158, 66, 158),
(159, 67, 159),
(160, 67, 160),
(161, 67, 161),
(162, 67, 162);

-- --------------------------------------------------------

--
-- Table structure for table `tblQueAssocQueType`
--

CREATE TABLE `tblQueAssocQueType` (
  `QueTypeAssocID` int(11) NOT NULL,
  `QuestionID` int(11) NOT NULL,
  `QueTypeID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQueAssocQueType`
--

INSERT INTO `tblQueAssocQueType` (`QueTypeAssocID`, `QuestionID`, `QueTypeID`) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 1),
(5, 5, 1),
(6, 6, 1),
(7, 7, 1),
(8, 8, 2),
(10, 10, 1),
(14, 14, 1),
(15, 15, 1),
(16, 16, 1),
(17, 17, 2),
(18, 18, 2),
(19, 19, 2),
(20, 20, 2),
(21, 21, 2),
(22, 22, 2),
(23, 23, 2),
(24, 24, 2),
(25, 25, 2),
(26, 26, 2),
(27, 27, 2),
(28, 28, 1),
(29, 29, 4),
(30, 30, 4),
(31, 31, 4),
(32, 32, 2),
(33, 33, 2),
(34, 34, 2),
(35, 35, 2),
(36, 36, 2),
(37, 37, 2),
(38, 38, 1),
(39, 39, 2),
(40, 40, 1),
(41, 41, 1),
(42, 42, 2),
(43, 43, 4),
(44, 44, 3),
(45, 45, 2),
(46, 46, 4),
(47, 47, 2),
(48, 48, 1),
(49, 49, 1),
(50, 50, 1),
(51, 51, 2),
(52, 52, 4),
(53, 53, 1),
(54, 54, 2),
(55, 55, 3),
(56, 56, 1),
(57, 57, 4),
(58, 58, 1),
(59, 59, 2),
(60, 60, 3),
(61, 61, 2),
(62, 62, 1),
(63, 63, 1),
(64, 64, 4),
(65, 65, 4),
(66, 66, 1),
(67, 67, 1);

-- --------------------------------------------------------

--
-- Table structure for table `tblQueCorrectAns`
--

CREATE TABLE `tblQueCorrectAns` (
  `CorrectAnsID` int(11) NOT NULL,
  `QuestionID` int(11) NOT NULL,
  `AnswerID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQueCorrectAns`
--

INSERT INTO `tblQueCorrectAns` (`CorrectAnsID`, `QuestionID`, `AnswerID`) VALUES
(11, 8, 29),
(20, 17, 58),
(21, 18, 59),
(22, 19, 60),
(41, 20, 61),
(74, 21, 62),
(75, 22, 63),
(76, 23, 64),
(77, 24, 65),
(78, 25, 66),
(79, 1, 1),
(80, 1, 2),
(81, 1, 3),
(82, 2, 6),
(83, 3, 12),
(84, 4, 14),
(85, 5, 20),
(86, 6, 22),
(87, 7, 25),
(88, 7, 26),
(89, 10, 36),
(90, 14, 46),
(91, 15, 50),
(92, 16, 54),
(93, 26, 67),
(94, 27, 68),
(97, 29, 73),
(98, 30, 76),
(101, 28, 69),
(102, 28, 72),
(103, 31, 77),
(104, 32, 79),
(105, 33, 80),
(106, 34, 81),
(107, 35, 82),
(108, 36, 83),
(109, 37, 84),
(111, 39, 87),
(112, 38, 85),
(118, 40, 88),
(119, 41, 90),
(120, 41, 91),
(121, 42, 94),
(122, 43, 95),
(123, 44, 98),
(124, 45, 101),
(125, 46, 102),
(126, 47, 104),
(127, 48, 106),
(128, 49, 109),
(129, 50, 113),
(130, 51, 115),
(131, 52, 116),
(132, 53, 118),
(133, 53, 119),
(134, 54, 122),
(135, 55, 124),
(136, 56, 127),
(137, 57, 131),
(139, 59, 137),
(140, 60, 139),
(141, 61, 142),
(144, 64, 152),
(145, 65, 154),
(148, 58, 133),
(149, 62, 145),
(150, 63, 148),
(151, 66, 156),
(152, 67, 160);

-- --------------------------------------------------------

--
-- Table structure for table `tblQuePaperAssocExamCoordinator`
--

CREATE TABLE `tblQuePaperAssocExamCoordinator` (
  `QuePaperAssocExamCoID` int(11) NOT NULL,
  `QuePaperID` int(11) NOT NULL,
  `ExamCoordinatorID` int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQuePaperAssocExamCoordinator`
--

INSERT INTO `tblQuePaperAssocExamCoordinator` (`QuePaperAssocExamCoID`, `QuePaperID`, `ExamCoordinatorID`) VALUES
(1, 5, 0),
(2, 6, 0),
(12, 8, 5),
(11, 7, 3),
(13, 9, 5),
(19, 11, 8),
(18, 11, 7);

-- --------------------------------------------------------

--
-- Table structure for table `tblQuePaperAssocQues`
--

CREATE TABLE `tblQuePaperAssocQues` (
  `QuePaperAssocID` int(11) NOT NULL,
  `TestID` int(11) NOT NULL,
  `QuePaperID` int(11) NOT NULL,
  `QuestionID` int(11) NOT NULL,
  `Marks` int(11) NOT NULL,
  `Negative_marks` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQuePaperAssocQues`
--

INSERT INTO `tblQuePaperAssocQues` (`QuePaperAssocID`, `TestID`, `QuePaperID`, `QuestionID`, `Marks`, `Negative_marks`) VALUES
(1, 1, 1, 1, 2, 0),
(2, 1, 1, 2, 2, 0),
(3, 1, 1, 3, 2, 0),
(4, 1, 1, 4, 2, 0),
(5, 1, 1, 5, 2, 0),
(6, 1, 1, 6, 2, 0),
(7, 1, 1, 7, 2, 0),
(8, 1, 1, 8, 2, 0),
(10, 1, 1, 10, 2, 0),
(14, 1, 1, 14, 2, 0),
(15, 1, 1, 15, 2, 0),
(16, 1, 1, 16, 2, 0),
(17, 1, 1, 17, 2, 0),
(18, 1, 1, 18, 2, 0),
(19, 1, 1, 19, 2, 0),
(20, 1, 1, 20, 2, 0),
(21, 1, 1, 21, 2, 0),
(22, 1, 1, 22, 2, 0),
(23, 1, 1, 23, 2, 0),
(24, 1, 1, 24, 2, 0),
(25, 1, 1, 25, 10, 0),
(26, 2, 2, 26, 2, 1),
(27, 2, 2, 27, 2, 1),
(28, 2, 2, 28, 2, 1),
(29, 2, 2, 29, 2, 1),
(30, 2, 2, 30, 2, 1),
(31, 3, 3, 31, 4, 0),
(32, 3, 3, 32, 4, 0),
(33, 4, 4, 33, 2, 0),
(34, 4, 4, 34, 2, 0),
(35, 4, 4, 35, 2, 0),
(36, 4, 4, 36, 2, 0),
(37, 4, 4, 37, 2, 0),
(38, 5, 5, 38, 2, 0),
(39, 5, 5, 39, 2, 0),
(40, 7, 7, 40, 2, 0),
(41, 8, 8, 41, 2, 0),
(42, 8, 8, 42, 2, 0),
(43, 8, 8, 43, 2, 0),
(44, 8, 8, 44, 2, 0),
(45, 9, 9, 45, 2, 0),
(46, 9, 9, 46, 2, 0),
(47, 10, 10, 47, 2, 1),
(48, 10, 10, 48, 2, 1),
(49, 10, 10, 49, 2, 1),
(50, 10, 10, 50, 2, 1),
(51, 10, 10, 51, 2, 1),
(52, 10, 10, 52, 2, 1),
(53, 10, 10, 53, 2, 1),
(54, 10, 10, 54, 2, 1),
(55, 10, 10, 55, 2, 1),
(56, 10, 10, 56, 2, 1),
(57, 11, 11, 57, 2, 1),
(58, 11, 11, 58, 2, 1),
(59, 11, 11, 59, 2, 1),
(60, 11, 11, 60, 2, 1),
(61, 11, 11, 61, 2, 1),
(62, 11, 11, 62, 2, 1),
(63, 11, 11, 63, 2, 1),
(64, 11, 11, 64, 2, 1),
(65, 11, 11, 65, 2, 1),
(66, 11, 11, 66, 2, 1),
(67, 11, 11, 67, 2, 1);

-- --------------------------------------------------------

--
-- Table structure for table `tblQuestionPaper`
--

CREATE TABLE `tblQuestionPaper` (
  `QuePaperID` int(11) NOT NULL,
  `Title` varchar(200) NOT NULL,
  `TotalMarks` int(11) NOT NULL,
  `Date` date NOT NULL,
  `Duration` time DEFAULT NULL,
  `UserID` int(11) NOT NULL,
  `IsDelete` tinyint(1) NOT NULL DEFAULT '1',
  `IsLive` tinyint(1) NOT NULL DEFAULT '0',
  `IsMockTest` tinyint(1) NOT NULL,
  `ReferenceDoc` varchar(100) DEFAULT NULL,
  `PassingPercentage` int(11) NOT NULL,
  `Timer` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQuestionPaper`
--

INSERT INTO `tblQuestionPaper` (`QuePaperID`, `Title`, `TotalMarks`, `Date`, `Duration`, `UserID`, `IsDelete`, `IsLive`, `IsMockTest`, `ReferenceDoc`, `PassingPercentage`, `Timer`) VALUES
(1, 'MVC TEST', 50, '2019-01-31', NULL, 1, 0, 1, 0, '', 50, 1800),
(2, 'Demo paper', 10, '2019-02-05', NULL, 1, 0, 1, 0, '', 45, 600),
(3, 'Demo paper1', 8, '2019-02-05', NULL, 1, 0, 1, 0, '', 0, 3600),
(4, 'Descriptive test', 10, '2019-02-06', NULL, 1, 0, 1, 0, '', 0, 3600),
(5, 'Test1', 4, '2019-02-11', NULL, 3, 0, 0, 0, '', 40, NULL),
(6, 'Eeqweqw', 4, '2019-02-11', NULL, 3, 0, 0, 0, '', 25, NULL),
(7, 'Test2', 2, '2019-02-12', NULL, 3, 0, 0, 0, '', 25, NULL),
(8, 'Paper1', 8, '2019-02-12', NULL, 5, 0, 1, 0, '', 25, 3600),
(9, 'Paper2', 4, '2019-02-12', NULL, 5, 0, 1, 0, '', 20, 3600),
(10, 'Regular test', 20, '2019-02-20', NULL, 28, 0, 1, 0, '', 50, 1800),
(11, 'Mock test', 22, '2019-02-20', NULL, 28, 0, 1, 1, 'php_tutorial2.pdf', 40, 1800);

-- --------------------------------------------------------

--
-- Table structure for table `tblQuestions`
--

CREATE TABLE `tblQuestions` (
  `QuestionID` int(11) NOT NULL,
  `Question` text NOT NULL,
  `Description` varchar(700) NOT NULL,
  `Image` varchar(100) DEFAULT NULL,
  `ReferenceDoc` varchar(500) DEFAULT NULL,
  `RefDocPageNo` int(11) DEFAULT NULL,
  `Date` date NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQuestions`
--

INSERT INTO `tblQuestions` (`QuestionID`, `Question`, `Description`, `Image`, `ReferenceDoc`, `RefDocPageNo`, `Date`) VALUES
(1, 'What are the 3 main components of an ASP.NET MVC application? (Choose Multiple)', '', NULL, '', 0, '2019-01-31'),
(2, 'In which assembly is the MVC framework defined?', '', NULL, '', 0, '2019-01-31'),
(3, 'What are the features of MVC5?', '', NULL, '', 0, '2019-01-31'),
(4, 'What is the default value for the Method attribute in a ASP.NET server-side Form control', '', NULL, '', 0, '2019-01-31'),
(5, 'How we can define any state management in MVC?', '', NULL, '', 0, '2019-01-31'),
(6, 'Which symbol use for RAZOR syntax?', '', NULL, '', 0, '2019-01-31'),
(7, 'What are the two popular asp.net mvc view engines? (choose multiple)', '', NULL, '', 0, '2019-01-31'),
(8, 'Can you give a simple example of textbox?', '', NULL, '', 0, '2019-01-31'),
(10, 'What is the syntax for server side comment in razor view?', '', NULL, '', 0, '2019-01-31'),
(14, 'How to assign Master Page in MVC?', '', NULL, '', 0, '2019-01-31'),
(15, 'Can we share a view across multiple controllers?', '', NULL, '', 0, '2019-01-31'),
(16, 'What is the use of Controller in an MVC Application?', '', NULL, '', 0, '2019-01-31'),
(17, 'What is the difference between Viewbag and Viewdata?', '', NULL, '', 0, '2019-01-31'),
(18, 'What is the default view engine in ASP.NET MVC?', '', NULL, '', 0, '2019-01-31'),
(19, 'What are the file extension in razor view?', '', NULL, '', 0, '2019-01-31'),
(20, 'Write difference between Abstract class and Interface?', '', NULL, '', 0, '2019-01-31'),
(21, 'What are the differences between a Class and a Struct?', '', NULL, '', 0, '2019-01-31'),
(22, 'Explain Abstraction.', '', NULL, '', 0, '2019-01-31'),
(23, 'What is boxing and unboxing in C# with example?', '', NULL, '', 0, '2019-01-31'),
(24, 'What is scope of a protected member variable of a C# class?', '', NULL, '', 0, '2019-01-31'),
(25, 'Write a program to reverse the following string. \"ACQUISCENT\" (need OUTPUT- \"TNECSIUQCA\")    Note: You can\'t use \".reverse\" function, you have to implement your own logic in program.', '', NULL, '', 0, '2019-01-31'),
(26, 'Explain javascript', '', NULL, '', 0, '2019-02-05'),
(27, 'Explain jquery', '', NULL, '', 0, '2019-02-05'),
(28, 'Abcd', '', NULL, '', 0, '2019-02-05'),
(29, 'Wamp is windows specific?', '', NULL, '', 0, '2019-02-05'),
(30, 'Defg?', '', NULL, '', 0, '2019-02-05'),
(31, 'Abcde', '', NULL, '', 0, '2019-02-05'),
(32, 'Mnop', '', NULL, '', 0, '2019-02-05'),
(33, 'A', '', NULL, '', 0, '2019-02-06'),
(34, 'B', '', NULL, '', 0, '2019-02-06'),
(35, 'C', '', NULL, '', 0, '2019-02-06'),
(36, 'D', '', NULL, '', 0, '2019-02-06'),
(37, 'E', '', NULL, '', 0, '2019-02-06'),
(38, 'Abcd', '', NULL, '', 0, '2019-02-11'),
(39, 'Defg', '', NULL, '', 0, '2019-02-11'),
(40, 'Testque', '', NULL, '', 0, '2019-02-12'),
(41, 'What is php?', '', NULL, '', 0, '2019-02-12'),
(42, 'Explain javavscript', '', NULL, '', 0, '2019-02-12'),
(43, 'Wamp is windows specific?', '', NULL, '', 0, '2019-02-12'),
(44, 'Php is  _____ scripting language', '', NULL, '', 0, '2019-02-12'),
(45, 'Explain jquery', '', NULL, '', 0, '2019-02-12'),
(46, 'Php is server side scripting language?', '', NULL, '', 0, '2019-02-12'),
(47, 'Explain javascript', '', NULL, '', 0, '2019-02-20'),
(48, 'Inside which HTML element do we put the JavaScript?', '', NULL, '', 0, '2019-02-20'),
(49, 'Which of the following is correct?', '', NULL, '', 0, '2019-02-20'),
(50, 'HTML stands for what?', '', NULL, '', 0, '2019-02-20'),
(51, 'Explain jquery', '', NULL, '', 0, '2019-02-20'),
(52, 'AJAX stands for Asynchronous JavaScript and XML?', '', NULL, '', 0, '2019-02-20'),
(53, 'What does PHP stand for? (choose multiple)', '', NULL, '', 0, '2019-02-20'),
(54, 'Explain ajax', '', NULL, '', 0, '2019-02-20'),
(55, 'Php is _____ scripting language', '', NULL, '', 0, '2019-02-20'),
(56, 'What does CSS stand for?', '', NULL, '', 0, '2019-02-20'),
(57, 'Php is case sensitive?', '', NULL, '', 25, '2019-02-20'),
(58, 'Which is the most universally effective PHP tag style?', '', NULL, '', 23, '2019-02-20'),
(59, 'Explain php', '', NULL, 'php_tutorial3.pdf', 0, '2019-02-20'),
(60, 'Php is _____ scripting language', '', NULL, '', 0, '2019-02-20'),
(61, 'Explain php constants', '', NULL, '', 37, '2019-02-20'),
(62, 'Which of the following statements prints in PHP?', '', NULL, '', 0, '2019-02-20'),
(63, 'In php,each statement must be end with?', '', NULL, 'php_tutorial4.pdf', 0, '2019-02-20'),
(64, 'Interface constant can be override in class implementing the interface.', '', NULL, '', 10, '2019-02-20'),
(65, 'In PHP, a class can be inherited from one base class and with multiple base classes.', '', NULL, '', 0, '2019-02-20'),
(66, 'Which of the following PHP statements will output Hello World on the screen?', '', NULL, '', 0, '2019-02-20'),
(67, 'Which of the below statements is equivalent to $add += $add ?', '', NULL, '', 39, '2019-02-20');

-- --------------------------------------------------------

--
-- Table structure for table `tblQuestionType`
--

CREATE TABLE `tblQuestionType` (
  `QueTypeID` int(11) NOT NULL,
  `QueType` varchar(100) NOT NULL,
  `Date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblQuestionType`
--

INSERT INTO `tblQuestionType` (`QueTypeID`, `QueType`, `Date`) VALUES
(1, 'Multiple choice questions', NULL),
(2, 'Descriptive questions', NULL),
(3, 'Fill in the blanks', NULL),
(4, 'True false', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `tblTestDetails`
--

CREATE TABLE `tblTestDetails` (
  `TestID` int(11) NOT NULL,
  `TestName` varchar(200) NOT NULL,
  `Date` date NOT NULL,
  `IsDelete` tinyint(1) NOT NULL DEFAULT '0',
  `IsLive` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblTestDetails`
--

INSERT INTO `tblTestDetails` (`TestID`, `TestName`, `Date`, `IsDelete`, `IsLive`) VALUES
(1, 'MVC TEST', '2019-01-31', 0, 1),
(2, 'Demo paper', '2019-02-05', 0, 1),
(3, 'Demo paper1', '2019-02-05', 0, 1),
(4, 'Descriptive test', '2019-02-06', 0, 1),
(5, 'Test1', '2019-02-11', 0, 0),
(6, 'Eeqweqw', '2019-02-11', 0, 0),
(7, 'Test2', '2019-02-12', 0, 0),
(8, 'Paper1', '2019-02-12', 0, 1),
(9, 'Paper2', '2019-02-12', 0, 1),
(10, 'Regular test', '2019-02-20', 0, 1),
(11, 'Mock test', '2019-02-20', 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `tblUserAttemptAns`
--

CREATE TABLE `tblUserAttemptAns` (
  `UserAttemptAnsID` int(11) NOT NULL,
  `AnswerID` int(11) NOT NULL,
  `UserAttemptQueID` int(11) NOT NULL,
  `IsDescriptive` tinyint(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblUserAttemptAns`
--

INSERT INTO `tblUserAttemptAns` (`UserAttemptAnsID`, `AnswerID`, `UserAttemptQueID`, `IsDescriptive`) VALUES
(1, 1, 1, 1),
(2, 2, 2, 1),
(3, 36, 3, 0),
(4, 46, 4, 0),
(5, 3, 5, 1),
(6, 50, 6, 0),
(7, 6, 7, 0),
(8, 22, 8, 0),
(9, 26, 9, 0),
(10, 4, 10, 1),
(11, 54, 11, 0),
(12, 20, 12, 0),
(13, 10, 13, 0),
(14, 5, 14, 1),
(15, 6, 15, 1),
(16, 2, 16, 0),
(17, 14, 17, 0),
(18, 7, 18, 1),
(19, 20, 19, 0),
(20, 9, 20, 0),
(21, 8, 21, 1),
(22, 15, 22, 0),
(23, 56, 23, 0),
(24, 9, 24, 1),
(25, 22, 25, 0),
(26, 10, 26, 1),
(27, 6, 27, 0),
(28, 36, 28, 0),
(29, 11, 29, 1),
(30, 50, 30, 0),
(31, 12, 31, 1),
(32, 13, 32, 1),
(33, 14, 33, 1),
(34, 15, 34, 1),
(35, 1, 35, 0),
(36, 2, 35, 0),
(37, 3, 35, 0),
(38, 47, 36, 0),
(39, 16, 37, 1),
(40, 25, 38, 0),
(41, 26, 38, 0),
(42, 17, 39, 1),
(43, 25, 40, 0),
(44, 26, 40, 0),
(45, 50, 41, 0),
(46, 15, 42, 0),
(47, 20, 43, 0),
(48, 18, 44, 1),
(49, 6, 45, 0),
(50, 22, 46, 0),
(51, 57, 47, 0),
(52, 36, 48, 0),
(53, 19, 49, 1),
(54, 20, 50, 1),
(55, 1, 51, 0),
(56, 2, 51, 0),
(57, 3, 51, 0),
(58, 21, 52, 1),
(59, 22, 53, 1),
(60, 9, 54, 0),
(61, 23, 55, 1),
(62, 24, 56, 1),
(63, 34, 57, 0),
(64, 9, 58, 0),
(65, 25, 59, 0),
(66, 21, 60, 0),
(67, 25, 61, 1),
(68, 50, 62, 0),
(69, 17, 63, 0),
(70, 13, 64, 0),
(71, 26, 65, 1),
(72, 54, 66, 0),
(73, 27, 67, 1),
(74, 28, 68, 1),
(75, 29, 69, 1),
(76, 49, 70, 0),
(77, 30, 71, 1),
(78, 31, 72, 1),
(79, 32, 73, 1),
(80, 33, 74, 1),
(81, 2, 75, 0),
(82, 3, 75, 0),
(83, 4, 75, 0),
(84, 5, 76, 0),
(85, 34, 77, 1),
(86, 35, 78, 1),
(87, 36, 79, 0),
(88, 6, 80, 0),
(89, 36, 81, 1),
(90, 13, 82, 0),
(91, 25, 83, 0),
(92, 2, 84, 0),
(93, 3, 84, 0),
(94, 54, 85, 0),
(95, 17, 86, 0),
(96, 37, 87, 1),
(97, 38, 88, 1),
(98, 39, 89, 1),
(99, 22, 90, 0),
(100, 40, 91, 1),
(101, 50, 92, 0),
(102, 41, 93, 1),
(103, 42, 94, 1),
(104, 43, 95, 1),
(105, 44, 96, 1),
(106, 12, 97, 0),
(107, 6, 98, 0),
(108, 18, 99, 0),
(109, 19, 99, 0),
(110, 57, 100, 0),
(111, 1, 101, 0),
(112, 2, 101, 0),
(113, 3, 101, 0),
(114, 4, 101, 0),
(115, 45, 102, 1),
(116, 22, 103, 0),
(117, 46, 104, 0),
(118, 46, 105, 1),
(119, 47, 106, 1),
(120, 48, 107, 1),
(121, 25, 108, 0),
(122, 26, 108, 0),
(123, 27, 108, 0),
(124, 28, 108, 0),
(125, 52, 109, 0),
(126, 49, 110, 1),
(127, 36, 111, 0),
(128, 15, 112, 0),
(129, 36, 113, 0),
(130, 51, 114, 0),
(131, 18, 115, 0),
(132, 12, 116, 0),
(133, 25, 117, 0),
(134, 26, 117, 0),
(135, 50, 118, 1),
(136, 54, 119, 0),
(137, 1, 120, 0),
(138, 2, 120, 0),
(139, 3, 120, 0),
(140, 51, 121, 1),
(141, 6, 122, 0),
(142, 52, 123, 1),
(143, 53, 124, 1),
(144, 22, 125, 0),
(145, 6, 126, 0),
(146, 54, 127, 1),
(147, 36, 128, 0),
(148, 1, 129, 0),
(149, 2, 129, 0),
(150, 3, 129, 0),
(151, 25, 130, 0),
(152, 27, 130, 0),
(153, 22, 131, 0),
(154, 55, 132, 1),
(155, 14, 133, 0),
(156, 19, 134, 0),
(157, 9, 135, 0),
(158, 10, 135, 0),
(159, 11, 135, 0),
(160, 12, 135, 0),
(161, 56, 136, 1),
(162, 46, 137, 0),
(163, 47, 137, 0),
(164, 50, 138, 0),
(165, 57, 139, 1),
(166, 58, 140, 1),
(167, 54, 141, 0),
(168, 55, 141, 0),
(169, 56, 141, 0),
(170, 57, 141, 0),
(171, 12, 142, 0),
(172, 6, 143, 0),
(173, 1, 144, 0),
(174, 2, 144, 0),
(175, 3, 144, 0),
(176, 59, 145, 1),
(177, 60, 146, 1),
(178, 61, 147, 1),
(179, 46, 148, 0),
(180, 22, 149, 0),
(181, 36, 150, 0),
(182, 50, 151, 0),
(183, 17, 152, 0),
(184, 57, 153, 0),
(185, 62, 154, 1),
(186, 63, 155, 1),
(187, 25, 156, 0),
(188, 26, 156, 0),
(189, 64, 157, 1),
(190, 13, 158, 0),
(191, 57, 159, 0),
(192, 15, 160, 0),
(193, 65, 161, 1),
(194, 66, 162, 1),
(195, 36, 163, 0),
(196, 9, 164, 0),
(197, 11, 164, 0),
(198, 20, 165, 0),
(199, 1, 166, 0),
(200, 3, 166, 0),
(201, 67, 167, 1),
(202, 8, 168, 0),
(203, 68, 169, 1),
(204, 69, 170, 1),
(205, 70, 171, 1),
(206, 28, 172, 0),
(207, 52, 173, 0),
(208, 22, 174, 0),
(209, 46, 175, 0),
(210, 71, 176, 1),
(211, 72, 177, 1),
(212, 73, 178, 1),
(213, 74, 179, 1),
(214, 46, 180, 0),
(215, 22, 181, 0),
(216, 75, 182, 1),
(217, 9, 183, 0),
(218, 1, 184, 0),
(219, 2, 184, 0),
(220, 3, 184, 0),
(221, 50, 185, 0),
(222, 25, 186, 0),
(223, 6, 187, 0),
(224, 76, 188, 1),
(225, 77, 189, 1),
(226, 78, 190, 1),
(227, 79, 191, 1),
(228, 36, 192, 0),
(229, 80, 193, 1),
(230, 17, 194, 0),
(231, 54, 195, 0),
(232, 81, 196, 1),
(233, 82, 197, 1),
(234, 13, 198, 0),
(235, 83, 199, 1),
(236, 84, 200, 1),
(237, 85, 201, 1),
(238, 9, 202, 0),
(239, 86, 203, 1),
(240, 87, 204, 1),
(241, 57, 205, 0),
(242, 25, 206, 0),
(243, 26, 206, 0),
(244, 88, 207, 1),
(245, 50, 208, 0),
(246, 1, 209, 0),
(247, 2, 209, 0),
(248, 3, 209, 0),
(249, 6, 210, 0),
(250, 89, 211, 1),
(251, 24, 212, 0),
(252, 34, 213, 0),
(253, 35, 213, 0),
(254, 36, 213, 0),
(255, 37, 213, 0),
(256, 90, 214, 1),
(257, 46, 215, 0),
(258, 91, 216, 1),
(259, 9, 217, 0),
(260, 55, 218, 0),
(261, 49, 219, 0),
(262, 1, 220, 0),
(263, 2, 220, 0),
(264, 4, 220, 0),
(265, 28, 221, 0),
(266, 92, 222, 1),
(267, 20, 223, 0),
(268, 14, 224, 0),
(269, 93, 225, 1),
(270, 24, 226, 0),
(271, 94, 227, 1),
(272, 50, 228, 0),
(273, 6, 229, 0),
(274, 37, 230, 0),
(275, 95, 231, 1),
(276, 46, 232, 0),
(277, 96, 233, 1),
(278, 36, 234, 0),
(279, 97, 235, 1),
(280, 98, 236, 1),
(281, 2, 237, 0),
(282, 3, 237, 0),
(283, 50, 238, 0),
(284, 17, 239, 0),
(285, 99, 240, 1),
(286, 12, 241, 0),
(287, 100, 242, 1),
(288, 6, 243, 0),
(289, 25, 244, 0),
(290, 26, 244, 0),
(291, 22, 245, 0),
(292, 13, 246, 0),
(293, 57, 247, 0),
(294, 25, 248, 0),
(295, 26, 248, 0),
(296, 6, 249, 0),
(297, 1, 250, 0),
(298, 2, 250, 0),
(299, 3, 250, 0),
(300, 101, 251, 1),
(301, 24, 252, 0),
(302, 12, 253, 0),
(303, 20, 254, 0),
(304, 102, 255, 1),
(305, 103, 256, 1),
(306, 57, 257, 0),
(307, 104, 258, 1),
(308, 105, 259, 1),
(309, 106, 260, 1),
(310, 35, 261, 0),
(311, 53, 262, 0),
(312, 107, 263, 1),
(313, 108, 264, 1),
(314, 14, 265, 0),
(315, 109, 266, 1),
(316, 46, 267, 0),
(317, 12, 268, 0),
(318, 22, 269, 0),
(319, 25, 270, 0),
(320, 26, 270, 0),
(321, 6, 271, 0),
(322, 110, 272, 1),
(323, 34, 273, 0),
(324, 37, 273, 0),
(325, 111, 274, 1),
(326, 112, 275, 1),
(327, 113, 276, 1),
(328, 17, 277, 0),
(329, 18, 277, 0),
(330, 114, 278, 1),
(331, 57, 279, 0),
(332, 115, 280, 1),
(333, 13, 281, 0),
(334, 116, 282, 1),
(335, 117, 283, 1),
(336, 118, 284, 1),
(337, 119, 285, 1),
(338, 1, 286, 0),
(339, 2, 286, 0),
(340, 3, 286, 0),
(341, 50, 287, 0),
(342, 46, 288, 0),
(343, 19, 289, 0),
(344, 1, 290, 0),
(345, 2, 290, 0),
(346, 3, 290, 0),
(347, 36, 291, 0),
(348, 6, 292, 0),
(349, 16, 293, 0),
(350, 51, 294, 0),
(351, 48, 295, 0),
(352, 120, 296, 1),
(353, 121, 297, 1),
(354, 122, 298, 1),
(355, 22, 299, 0),
(356, 123, 300, 1),
(357, 9, 301, 0),
(358, 26, 302, 0),
(359, 124, 303, 1),
(360, 125, 304, 1),
(361, 126, 305, 1),
(362, 48, 306, 0),
(363, 127, 307, 1),
(364, 50, 308, 0),
(365, 54, 309, 0),
(366, 22, 310, 0),
(367, 6, 311, 0),
(368, 128, 312, 1),
(369, 129, 313, 1),
(370, 130, 314, 1),
(371, 36, 315, 0),
(372, 131, 316, 1),
(373, 15, 317, 0),
(374, 18, 318, 0),
(375, 19, 318, 0),
(376, 132, 319, 1),
(377, 12, 320, 0),
(378, 1, 321, 0),
(379, 2, 321, 0),
(380, 3, 321, 0),
(381, 133, 322, 1),
(382, 134, 323, 1),
(383, 25, 324, 0),
(384, 26, 324, 0),
(385, 135, 325, 1),
(386, 35, 326, 0),
(387, 136, 327, 1),
(388, 137, 328, 1),
(389, 57, 329, 0),
(390, 19, 330, 0),
(391, 138, 331, 1),
(392, 22, 332, 0),
(393, 26, 333, 0),
(394, 27, 333, 0),
(395, 1, 334, 0),
(396, 2, 334, 0),
(397, 3, 334, 0),
(398, 139, 335, 1),
(399, 6, 336, 0),
(400, 14, 337, 0),
(401, 9, 338, 0),
(402, 11, 338, 0),
(403, 140, 339, 1),
(404, 141, 340, 1),
(405, 47, 341, 0),
(406, 50, 342, 0),
(407, 14, 343, 0),
(408, 142, 344, 1),
(409, 143, 345, 1),
(410, 25, 346, 0),
(411, 27, 346, 0),
(412, 144, 347, 1),
(413, 6, 348, 0),
(414, 22, 349, 0),
(415, 145, 350, 1),
(416, 146, 351, 1),
(417, 48, 352, 0),
(418, 17, 353, 0),
(419, 18, 353, 0),
(420, 57, 354, 0),
(421, 50, 355, 0),
(422, 147, 356, 1),
(423, 36, 357, 0),
(424, 1, 358, 0),
(425, 2, 358, 0),
(426, 3, 358, 0),
(427, 148, 359, 1),
(428, 149, 360, 1),
(429, 22, 361, 0),
(430, 150, 362, 1),
(431, 12, 363, 0),
(432, 50, 364, 0),
(433, 46, 365, 0),
(434, 151, 366, 1),
(435, 152, 367, 1),
(436, 13, 368, 0),
(437, 153, 369, 1),
(438, 25, 370, 0),
(439, 6, 371, 0),
(440, 1, 372, 0),
(441, 2, 372, 0),
(442, 3, 372, 0),
(443, 57, 373, 0),
(444, 34, 374, 0),
(445, 36, 374, 0),
(446, 37, 374, 0),
(447, 19, 375, 0),
(448, 154, 376, 1),
(449, 6, 377, 0),
(450, 155, 378, 1),
(451, 17, 379, 0),
(452, 18, 379, 0),
(453, 12, 380, 0),
(454, 156, 381, 1),
(455, 25, 382, 0),
(456, 26, 382, 0),
(457, 34, 383, 0),
(458, 37, 383, 0),
(459, 57, 384, 0),
(460, 22, 385, 0),
(461, 50, 386, 0),
(462, 1, 387, 0),
(463, 2, 387, 0),
(464, 3, 387, 0),
(465, 157, 388, 1),
(466, 158, 389, 1),
(467, 13, 390, 0),
(468, 159, 391, 1),
(469, 46, 392, 0),
(470, 160, 393, 1),
(471, 161, 394, 1),
(472, 162, 395, 1),
(473, 1, 396, 0),
(474, 2, 396, 0),
(475, 3, 396, 0),
(476, 13, 397, 0),
(477, 36, 398, 0),
(478, 12, 399, 0),
(479, 19, 400, 0),
(480, 163, 401, 1),
(481, 164, 402, 1),
(482, 25, 403, 0),
(483, 26, 403, 0),
(484, 165, 404, 1),
(485, 57, 405, 0),
(486, 166, 406, 1),
(487, 22, 407, 0),
(488, 46, 408, 0),
(489, 47, 408, 0),
(490, 50, 409, 0),
(491, 167, 410, 1),
(492, 5, 411, 0),
(493, 8, 411, 0),
(494, 22, 412, 0),
(495, 1, 413, 0),
(496, 2, 413, 0),
(497, 3, 413, 0),
(498, 6, 414, 0),
(499, 168, 415, 1),
(500, 169, 416, 1),
(501, 170, 417, 1),
(502, 25, 418, 0),
(503, 13, 419, 0),
(504, 56, 420, 0),
(505, 34, 421, 0),
(506, 36, 421, 0),
(507, 37, 421, 0),
(508, 50, 422, 0),
(509, 12, 423, 0),
(510, 19, 424, 0),
(511, 46, 425, 0),
(512, 171, 426, 1),
(513, 13, 427, 0),
(514, 172, 428, 1),
(515, 173, 429, 1),
(516, 174, 430, 1),
(517, 175, 431, 1),
(518, 176, 432, 1),
(519, 1, 433, 0),
(520, 2, 433, 0),
(521, 3, 433, 0),
(522, 177, 434, 1),
(523, 50, 435, 0),
(524, 25, 436, 0),
(525, 26, 436, 0),
(526, 35, 437, 0),
(527, 36, 437, 0),
(528, 57, 438, 0),
(529, 46, 439, 0),
(530, 22, 440, 0),
(531, 20, 441, 0),
(532, 178, 442, 1),
(533, 9, 443, 0),
(534, 179, 444, 1),
(535, 12, 445, 0),
(536, 22, 446, 0),
(537, 13, 447, 0),
(538, 25, 448, 0),
(539, 26, 448, 0),
(540, 180, 449, 1),
(541, 181, 450, 1),
(542, 182, 451, 1),
(543, 183, 452, 1),
(544, 57, 453, 0),
(545, 1, 454, 0),
(546, 2, 454, 0),
(547, 3, 454, 0),
(548, 6, 455, 0),
(549, 19, 456, 0),
(550, 36, 457, 0),
(551, 184, 458, 1),
(552, 185, 459, 1),
(553, 46, 460, 0),
(554, 50, 461, 0),
(555, 12, 462, 0),
(556, 36, 463, 0),
(557, 46, 464, 0),
(558, 186, 465, 1),
(559, 20, 466, 0),
(560, 187, 467, 1),
(561, 22, 468, 0),
(562, 188, 469, 1),
(563, 2, 470, 0),
(564, 3, 470, 0),
(565, 4, 470, 0),
(566, 189, 471, 1),
(567, 6, 472, 0),
(568, 190, 473, 1),
(569, 191, 474, 1),
(570, 192, 475, 1),
(571, 17, 476, 0),
(572, 193, 477, 1),
(573, 50, 478, 0),
(574, 194, 479, 1),
(575, 195, 480, 1),
(576, 25, 481, 0),
(577, 1, 482, 0),
(578, 2, 482, 0),
(579, 3, 482, 0),
(580, 22, 483, 0),
(581, 13, 484, 0),
(582, 196, 485, 1),
(583, 197, 486, 1),
(584, 198, 487, 1),
(585, 54, 488, 0),
(586, 36, 489, 0),
(587, 9, 490, 0),
(588, 46, 491, 0),
(589, 199, 492, 1),
(590, 200, 493, 1),
(591, 6, 494, 0),
(592, 201, 495, 1),
(593, 202, 496, 1),
(594, 9, 497, 0),
(595, 10, 497, 0),
(596, 11, 497, 0),
(597, 12, 497, 0),
(598, 203, 498, 1),
(599, 204, 499, 1),
(600, 22, 500, 0),
(601, 57, 501, 0),
(602, 205, 502, 1),
(603, 13, 503, 0),
(604, 17, 504, 0),
(605, 46, 505, 0),
(606, 1, 506, 0),
(607, 2, 506, 0),
(608, 3, 506, 0),
(609, 6, 507, 0),
(610, 206, 508, 1),
(611, 35, 509, 0),
(612, 25, 510, 0),
(613, 26, 510, 0),
(614, 27, 510, 0),
(615, 28, 510, 0),
(616, 50, 511, 0),
(617, 6, 512, 0),
(618, 47, 513, 0),
(619, 207, 514, 1),
(620, 13, 515, 0),
(621, 208, 516, 1),
(622, 209, 517, 1),
(623, 210, 518, 1),
(624, 22, 519, 0),
(625, 211, 520, 1),
(626, 27, 521, 0),
(627, 212, 522, 1),
(628, 213, 523, 1),
(629, 1, 524, 0),
(630, 2, 524, 0),
(631, 3, 524, 0),
(632, 12, 525, 0),
(633, 19, 526, 0),
(634, 57, 527, 0),
(635, 214, 528, 1),
(636, 36, 529, 0),
(637, 215, 530, 1),
(638, 216, 531, 1),
(639, 217, 532, 1),
(640, 9, 533, 0),
(641, 218, 534, 1),
(642, 20, 535, 0),
(643, 219, 536, 1),
(644, 220, 537, 1),
(645, 36, 538, 0),
(646, 221, 539, 1),
(647, 22, 540, 0),
(648, 15, 541, 0),
(649, 222, 542, 1),
(650, 47, 543, 0),
(651, 223, 544, 1),
(652, 224, 545, 1),
(653, 6, 546, 0),
(654, 1, 547, 0),
(655, 2, 547, 0),
(656, 3, 547, 0),
(657, 50, 548, 0),
(658, 25, 549, 0),
(659, 26, 549, 0),
(660, 225, 550, 1),
(661, 56, 551, 0),
(662, 9, 552, 0),
(663, 27, 553, 0),
(664, 50, 554, 0),
(665, 37, 555, 0),
(666, 2, 556, 0),
(667, 3, 556, 0),
(668, 4, 556, 0),
(669, 226, 557, 1),
(670, 6, 558, 0),
(671, 227, 559, 1),
(672, 228, 560, 1),
(673, 20, 561, 0),
(674, 48, 562, 0),
(675, 24, 563, 0),
(676, 54, 564, 0),
(677, 229, 565, 1),
(678, 14, 566, 0),
(679, 230, 567, 1),
(680, 231, 568, 1),
(681, 14, 569, 0),
(682, 1, 570, 0),
(683, 2, 570, 0),
(684, 3, 570, 0),
(685, 4, 570, 0),
(686, 232, 571, 1),
(687, 20, 572, 0),
(688, 48, 573, 0),
(689, 233, 574, 1),
(690, 234, 575, 1),
(691, 34, 576, 0),
(692, 52, 577, 0),
(693, 54, 578, 0),
(694, 21, 579, 0),
(695, 6, 580, 0),
(696, 9, 581, 0),
(697, 10, 581, 0),
(698, 11, 581, 0),
(699, 12, 581, 0),
(700, 13, 582, 0),
(701, 19, 583, 0),
(702, 235, 584, 1),
(703, 236, 585, 1),
(704, 237, 586, 1),
(705, 50, 587, 0),
(706, 22, 588, 0),
(707, 36, 589, 0),
(708, 5, 590, 0),
(709, 1, 591, 0),
(710, 2, 591, 0),
(711, 3, 591, 0),
(712, 25, 592, 0),
(713, 27, 592, 0),
(714, 47, 593, 0),
(715, 57, 594, 0),
(716, 11, 595, 0),
(717, 6, 596, 0),
(718, 238, 597, 1),
(719, 57, 598, 0),
(720, 239, 599, 1),
(721, 240, 600, 1),
(722, 241, 601, 1),
(723, 242, 602, 1),
(724, 22, 603, 0),
(725, 243, 604, 1),
(726, 50, 605, 0),
(727, 17, 606, 0),
(728, 18, 606, 0),
(729, 244, 607, 1),
(730, 245, 608, 1),
(731, 13, 609, 0),
(732, 9, 610, 0),
(733, 46, 611, 0),
(734, 1, 612, 0),
(735, 2, 612, 0),
(736, 3, 612, 0),
(737, 246, 613, 1),
(738, 25, 614, 0),
(739, 26, 614, 0),
(740, 36, 615, 0),
(741, 51, 616, 0),
(742, 57, 617, 0),
(743, 20, 618, 0),
(744, 247, 619, 1),
(745, 248, 620, 1),
(746, 35, 621, 0),
(747, 36, 621, 0),
(748, 249, 622, 1),
(749, 1, 623, 0),
(750, 2, 623, 0),
(751, 3, 623, 0),
(752, 22, 624, 0),
(753, 250, 625, 1),
(754, 46, 626, 0),
(755, 251, 627, 1),
(756, 6, 628, 0),
(757, 25, 629, 0),
(758, 26, 629, 0),
(759, 27, 629, 0),
(760, 252, 630, 1),
(761, 253, 631, 1),
(762, 254, 632, 1),
(763, 9, 633, 0),
(764, 13, 634, 0),
(765, 25, 635, 0),
(766, 27, 635, 0),
(767, 255, 636, 1),
(768, 22, 637, 0),
(769, 57, 638, 0),
(770, 256, 639, 1),
(771, 46, 640, 0),
(772, 257, 641, 1),
(773, 258, 642, 1),
(774, 1, 643, 0),
(775, 2, 643, 0),
(776, 3, 643, 0),
(777, 259, 644, 1),
(778, 260, 645, 1),
(779, 36, 646, 0),
(780, 9, 647, 0),
(781, 11, 647, 0),
(782, 261, 648, 1),
(783, 15, 649, 0),
(784, 262, 650, 1),
(785, 263, 651, 1),
(786, 50, 652, 0),
(787, 264, 653, 1),
(788, 6, 654, 0),
(789, 20, 655, 0),
(790, 50, 656, 0),
(791, 25, 657, 0),
(792, 27, 657, 0),
(793, 265, 658, 1),
(794, 1, 659, 0),
(795, 2, 659, 0),
(796, 3, 659, 0),
(797, 36, 660, 0),
(798, 266, 661, 1),
(799, 19, 662, 0),
(800, 22, 663, 0),
(801, 267, 664, 1),
(802, 268, 665, 1),
(803, 269, 666, 1),
(804, 270, 667, 1),
(805, 46, 668, 0),
(806, 47, 668, 0),
(807, 271, 669, 1),
(808, 272, 670, 1),
(809, 273, 671, 1),
(810, 12, 672, 0),
(811, 274, 673, 1),
(812, 14, 674, 0),
(813, 57, 675, 0),
(814, 6, 676, 0),
(815, 275, 677, 1),
(816, 276, 678, 1),
(817, 16, 679, 0),
(818, 9, 680, 0),
(819, 277, 681, 1),
(820, 19, 682, 0),
(821, 278, 683, 1),
(822, 48, 684, 0),
(823, 279, 685, 1),
(824, 280, 686, 1),
(825, 281, 687, 1),
(826, 57, 688, 0),
(827, 6, 689, 0),
(828, 25, 690, 0),
(829, 27, 690, 0),
(830, 36, 691, 0),
(831, 51, 692, 0),
(832, 1, 693, 0),
(833, 2, 693, 0),
(834, 3, 693, 0),
(835, 22, 694, 0),
(836, 282, 695, 1),
(837, 283, 696, 1),
(838, 284, 697, 1),
(839, 6, 698, 0),
(840, 36, 699, 0),
(841, 22, 700, 0),
(842, 51, 701, 0),
(843, 285, 702, 1),
(844, 1, 703, 0),
(845, 2, 703, 0),
(846, 3, 703, 0),
(847, 286, 704, 1),
(848, 9, 705, 0),
(849, 287, 706, 1),
(850, 48, 707, 0),
(851, 57, 708, 0),
(852, 288, 709, 1),
(853, 13, 710, 0),
(854, 289, 711, 1),
(855, 19, 712, 0),
(856, 25, 713, 0),
(857, 27, 713, 0),
(858, 290, 714, 1),
(859, 291, 715, 1),
(860, 292, 716, 1),
(861, 293, 717, 1),
(862, 50, 718, 0),
(863, 9, 719, 0),
(864, 294, 720, 1),
(865, 1, 721, 0),
(866, 2, 721, 0),
(867, 3, 721, 0),
(868, 25, 722, 0),
(869, 26, 722, 0),
(870, 27, 722, 0),
(871, 295, 723, 1),
(872, 296, 724, 1),
(873, 297, 725, 1),
(874, 13, 726, 0),
(875, 14, 726, 0),
(876, 6, 727, 0),
(877, 298, 728, 1),
(878, 46, 729, 0),
(879, 47, 729, 0),
(880, 299, 730, 1),
(881, 36, 731, 0),
(882, 300, 732, 1),
(883, 301, 733, 1),
(884, 22, 734, 0),
(885, 302, 735, 1),
(886, 17, 736, 0),
(887, 18, 736, 0),
(888, 19, 736, 0),
(889, 46, 737, 0),
(890, 303, 738, 1),
(891, 304, 739, 1),
(892, 305, 740, 1),
(893, 1, 741, 0),
(894, 2, 741, 0),
(895, 3, 741, 0),
(896, 306, 742, 1),
(897, 13, 743, 0),
(898, 14, 743, 0),
(899, 16, 743, 0),
(900, 307, 744, 1),
(901, 308, 745, 1),
(902, 12, 746, 0),
(903, 35, 747, 0),
(904, 309, 748, 1),
(905, 310, 749, 1),
(906, 22, 750, 0),
(907, 52, 751, 0),
(908, 19, 752, 0),
(909, 311, 753, 1),
(910, 6, 754, 0),
(911, 312, 755, 1),
(912, 25, 756, 0),
(913, 27, 756, 0),
(914, 57, 757, 0),
(915, 55, 758, 0),
(916, 22, 759, 0),
(917, 13, 760, 0),
(918, 313, 761, 1),
(919, 46, 762, 0),
(920, 47, 762, 0),
(921, 25, 763, 0),
(922, 26, 763, 0),
(923, 314, 764, 1),
(924, 50, 765, 0),
(925, 12, 766, 0),
(926, 315, 767, 1),
(927, 19, 768, 0),
(928, 316, 769, 1),
(929, 317, 770, 1),
(930, 36, 771, 0),
(931, 1, 772, 0),
(932, 2, 772, 0),
(933, 3, 772, 0),
(934, 6, 773, 0),
(935, 318, 774, 1),
(936, 319, 775, 1),
(937, 320, 776, 1),
(938, 25, 777, 0),
(939, 27, 777, 0),
(940, 11, 778, 0),
(941, 321, 779, 1),
(942, 5, 780, 0),
(943, 322, 781, 1),
(944, 1, 782, 0),
(945, 2, 782, 0),
(946, 3, 782, 0),
(947, 47, 783, 0),
(948, 22, 784, 0),
(949, 323, 785, 1),
(950, 324, 786, 1),
(951, 19, 787, 0),
(952, 36, 788, 0),
(953, 325, 789, 1),
(954, 326, 790, 1),
(955, 327, 791, 1),
(956, 50, 792, 0),
(957, 328, 793, 1),
(958, 13, 794, 0),
(959, 329, 795, 1),
(960, 57, 796, 0),
(961, 330, 797, 1),
(962, 12, 798, 0),
(963, 331, 799, 1),
(964, 332, 800, 1),
(965, 53, 801, 0),
(966, 54, 802, 0),
(967, 333, 803, 1),
(968, 47, 804, 0),
(969, 14, 805, 0),
(970, 6, 806, 0),
(971, 1, 807, 0),
(972, 25, 808, 0),
(973, 27, 808, 0),
(974, 334, 809, 1),
(975, 22, 810, 0),
(976, 335, 811, 1),
(977, 336, 812, 1),
(978, 73, 813, 0),
(979, 69, 814, 0),
(980, 70, 814, 0),
(981, 75, 815, 0),
(982, 76, 816, 0),
(983, 337, 817, 1),
(984, 73, 818, 0),
(985, 338, 819, 1),
(986, 69, 820, 0),
(987, 72, 820, 0),
(988, 77, 821, 0),
(989, 339, 822, 1),
(990, 74, 823, 0),
(991, 340, 824, 1),
(992, 69, 825, 0),
(993, 341, 826, 1),
(994, 76, 827, 0),
(995, 342, 828, 1),
(996, 77, 829, 0),
(997, 116, 830, 0),
(998, 109, 831, 0),
(999, 118, 832, 0),
(1000, 119, 832, 0),
(1001, 113, 833, 0),
(1002, 124, 834, 0),
(1003, 127, 835, 0),
(1004, 343, 836, 1),
(1005, 108, 837, 0),
(1006, 344, 838, 1),
(1007, 133, 839, 0),
(1008, 145, 840, 0),
(1009, 152, 841, 0),
(1010, 131, 842, 0),
(1011, 139, 843, 0),
(1012, 148, 844, 0),
(1013, 162, 845, 0),
(1014, 156, 846, 0),
(1015, 345, 847, 1),
(1016, 153, 848, 0);

-- --------------------------------------------------------

--
-- Table structure for table `tblUserAttemptQuePaperDetails`
--

CREATE TABLE `tblUserAttemptQuePaperDetails` (
  `UserAttemptQPdetails_ID` int(11) NOT NULL,
  `UserID` int(11) NOT NULL,
  `QuePaperID` int(11) NOT NULL,
  `QuePaperAttemptDate` datetime DEFAULT NULL,
  `QuePaperSubmissionDate` datetime DEFAULT NULL,
  `UserTotalMarks` int(11) DEFAULT NULL,
  `Percentage` decimal(5,2) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblUserAttemptQuePaperDetails`
--

INSERT INTO `tblUserAttemptQuePaperDetails` (`UserAttemptQPdetails_ID`, `UserID`, `QuePaperID`, `QuePaperAttemptDate`, `QuePaperSubmissionDate`, `UserTotalMarks`, `Percentage`) VALUES
(48, 72, 2, '2019-02-05 11:42:21', '2019-02-05 11:42:40', 2, '20.00'),
(2, 4, 1, '2019-02-04 13:37:54', '2019-02-04 14:08:11', NULL, NULL),
(3, 5, 1, '2019-02-04 13:38:58', '2019-02-04 14:10:13', NULL, NULL),
(4, 10, 1, '2019-02-04 13:39:35', '2019-02-04 14:10:02', NULL, NULL),
(5, 16, 1, '2019-02-04 13:41:13', '2019-02-04 14:11:19', NULL, NULL),
(6, 9, 1, '2019-02-04 13:41:18', '2019-02-04 14:11:22', NULL, NULL),
(7, 17, 1, '2019-02-04 13:41:57', '2019-02-04 14:12:01', NULL, NULL),
(8, 11, 1, '2019-02-04 13:42:11', '2019-02-04 14:12:14', NULL, NULL),
(9, 27, 1, '2019-02-04 13:42:49', '2019-02-04 14:13:44', NULL, NULL),
(10, 23, 1, '2019-02-04 13:42:50', '2019-02-04 14:12:59', NULL, NULL),
(11, 6, 1, '2019-02-04 13:43:02', '2019-02-04 14:13:05', NULL, NULL),
(12, 13, 1, '2019-02-04 13:43:03', NULL, NULL, NULL),
(13, 14, 1, '2019-02-04 13:43:05', '2019-02-04 14:13:09', NULL, NULL),
(14, 26, 1, '2019-02-04 13:43:26', '2019-02-04 14:13:29', NULL, NULL),
(15, 18, 1, '2019-02-04 13:43:35', '2019-02-04 14:13:41', NULL, NULL),
(16, 21, 1, '2019-02-04 13:43:37', '2019-02-04 14:11:44', NULL, NULL),
(17, 30, 1, '2019-02-04 13:43:41', '2019-02-04 14:11:58', NULL, NULL),
(18, 20, 1, '2019-02-04 13:43:46', '2019-02-04 14:13:49', NULL, NULL),
(19, 28, 1, '2019-02-04 13:43:46', '2019-02-04 14:08:38', NULL, NULL),
(20, 19, 1, '2019-02-04 13:44:08', '2019-02-04 14:12:37', NULL, NULL),
(21, 22, 1, '2019-02-04 13:44:15', '2019-02-04 14:13:45', NULL, NULL),
(22, 29, 1, '2019-02-04 13:44:25', '2019-02-04 14:14:29', NULL, NULL),
(23, 25, 1, '2019-02-04 13:44:48', '2019-02-04 14:13:11', NULL, NULL),
(24, 7, 1, '2019-02-04 13:44:58', '2019-02-04 14:16:34', NULL, NULL),
(25, 34, 1, '2019-02-04 13:45:07', '2019-02-04 14:15:12', NULL, NULL),
(26, 24, 1, '2019-02-04 13:45:11', '2019-02-04 14:14:42', NULL, NULL),
(27, 38, 1, '2019-02-04 13:45:16', '2019-02-04 14:13:22', NULL, NULL),
(28, 40, 1, '2019-02-04 13:46:30', '2019-02-04 14:16:35', NULL, NULL),
(29, 15, 1, '2019-02-04 13:46:47', '2019-02-04 14:15:03', NULL, NULL),
(30, 41, 1, '2019-02-04 13:46:53', '2019-02-04 14:14:42', NULL, NULL),
(31, 36, 1, '2019-02-04 13:47:15', '2019-02-04 14:09:45', NULL, NULL),
(32, 39, 1, '2019-02-04 13:47:31', '2019-02-04 14:16:05', NULL, NULL),
(33, 33, 1, '2019-02-04 13:47:48', '2019-02-04 14:15:15', NULL, NULL),
(34, 42, 1, '2019-02-04 13:47:51', '2019-02-04 14:12:48', NULL, NULL),
(35, 8, 1, '2019-02-04 13:51:30', '2019-02-04 14:22:02', NULL, NULL),
(36, 37, 1, '2019-02-04 13:51:45', '2019-02-04 14:19:03', NULL, NULL),
(37, 46, 1, '2019-02-04 13:51:50', '2019-02-04 14:15:26', NULL, NULL),
(38, 47, 1, '2019-02-04 13:52:38', '2019-02-04 14:20:54', NULL, NULL),
(39, 44, 1, '2019-02-04 13:52:45', '2019-02-04 14:18:59', NULL, NULL),
(40, 45, 1, '2019-02-04 13:56:12', '2019-02-04 14:25:42', NULL, NULL),
(41, 12, 1, '2019-02-04 13:57:53', '2019-02-04 14:25:04', NULL, NULL),
(42, 51, 1, '2019-02-04 13:59:07', '2019-02-04 14:25:03', NULL, NULL),
(43, 48, 1, '2019-02-04 13:59:28', '2019-02-04 14:26:41', NULL, NULL),
(44, 35, 1, '2019-02-04 14:04:30', '2019-02-04 14:28:07', NULL, NULL),
(45, 31, 1, '2019-02-04 14:07:14', '2019-02-04 14:27:24', NULL, NULL),
(46, 52, 1, '2019-02-04 14:37:57', '2019-02-04 14:51:35', NULL, NULL),
(49, 75, 2, '2019-02-05 11:43:35', '2019-02-05 11:43:47', 6, '60.00'),
(50, 75, 3, '2019-02-05 13:13:17', NULL, NULL, NULL),
(65, 72, 3, '2019-02-06 11:58:18', NULL, NULL, NULL),
(60, 4, 3, '2019-02-05 20:37:06', '2019-02-05 20:37:23', NULL, NULL),
(61, 4, 2, '2019-02-05 20:37:33', NULL, NULL, NULL),
(62, 22, 2, '2019-02-05 22:16:17', '2019-02-05 22:17:31', NULL, NULL),
(70, 72, 4, '2019-02-06 18:05:11', '2019-02-06 18:05:15', 2, '20.00'),
(68, 72, 1, '2019-02-06 12:53:13', NULL, NULL, NULL),
(71, 76, 4, '2019-02-06 18:29:37', '2019-02-06 18:29:41', 0, '0.00'),
(72, 26, 4, '2019-02-07 08:07:38', NULL, 0, '0.00'),
(79, 77, 4, '2019-02-07 14:38:27', '2019-02-07 16:21:47', 0, '0.00'),
(74, 77, 2, '2019-02-07 13:30:50', NULL, NULL, NULL),
(75, 77, 3, '2019-02-07 13:32:17', NULL, NULL, NULL),
(80, 30, 3, '2019-02-09 20:57:20', '2019-02-09 20:57:44', NULL, NULL),
(81, 30, 2, '2019-02-09 20:57:50', NULL, NULL, NULL),
(89, 79, 9, '2019-02-12 18:05:18', NULL, NULL, NULL),
(198, 81, 10, '2019-02-20 14:25:01', '2019-02-20 14:26:58', 10, '50.00'),
(91, 80, 9, '2019-02-12 18:07:54', NULL, NULL, NULL),
(250, 81, 11, '2019-02-20 18:53:21', '2019-02-20 18:53:44', 10, '45.45');

-- --------------------------------------------------------

--
-- Table structure for table `tblUserAttemptQuestion`
--

CREATE TABLE `tblUserAttemptQuestion` (
  `QueAttemptID` int(11) NOT NULL,
  `UserID` int(11) NOT NULL,
  `TestID` int(11) NOT NULL,
  `QuePaperID` int(11) NOT NULL,
  `QuestionID` int(11) NOT NULL,
  `SubmissionDate` date NOT NULL,
  `UserMarks` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblUserAttemptQuestion`
--

INSERT INTO `tblUserAttemptQuestion` (`QueAttemptID`, `UserID`, `TestID`, `QuePaperID`, `QuestionID`, `SubmissionDate`, `UserMarks`) VALUES
(1, 2, 1, 1, 23, '2019-02-04', 2),
(2, 2, 1, 1, 21, '2019-02-04', 0),
(3, 2, 1, 1, 10, '2019-02-04', 1),
(4, 2, 1, 1, 14, '2019-02-04', 2),
(5, 2, 1, 1, 25, '2019-02-04', 10),
(6, 2, 1, 1, 15, '2019-02-04', 0),
(7, 2, 1, 1, 2, '2019-02-04', 1),
(8, 2, 1, 1, 6, '2019-02-04', 2),
(9, 2, 1, 1, 7, '2019-02-04', 1),
(10, 2, 1, 1, 20, '2019-02-04', 0),
(11, 2, 1, 1, 16, '2019-02-04', 2),
(12, 2, 1, 1, 5, '2019-02-04', 1),
(13, 2, 1, 1, 3, '2019-02-04', 2),
(14, 2, 1, 1, 24, '2019-02-04', 1),
(15, 2, 1, 1, 18, '2019-02-04', 2),
(16, 2, 1, 1, 1, '2019-02-04', 0),
(17, 2, 1, 1, 4, '2019-02-04', 1),
(18, 2, 1, 1, 17, '2019-02-04', 2),
(19, 4, 1, 1, 5, '2019-02-04', NULL),
(20, 4, 1, 1, 3, '2019-02-04', NULL),
(21, 4, 1, 1, 8, '2019-02-04', NULL),
(22, 4, 1, 1, 4, '2019-02-04', NULL),
(23, 4, 1, 1, 16, '2019-02-04', NULL),
(24, 4, 1, 1, 18, '2019-02-04', NULL),
(25, 4, 1, 1, 6, '2019-02-04', NULL),
(26, 4, 1, 1, 23, '2019-02-04', NULL),
(27, 4, 1, 1, 2, '2019-02-04', NULL),
(28, 4, 1, 1, 10, '2019-02-04', NULL),
(29, 4, 1, 1, 25, '2019-02-04', NULL),
(30, 4, 1, 1, 15, '2019-02-04', NULL),
(31, 4, 1, 1, 20, '2019-02-04', NULL),
(32, 4, 1, 1, 19, '2019-02-04', NULL),
(33, 4, 1, 1, 17, '2019-02-04', NULL),
(34, 4, 1, 1, 24, '2019-02-04', NULL),
(35, 4, 1, 1, 1, '2019-02-04', NULL),
(36, 4, 1, 1, 14, '2019-02-04', NULL),
(37, 4, 1, 1, 22, '2019-02-04', NULL),
(38, 4, 1, 1, 7, '2019-02-04', NULL),
(39, 4, 1, 1, 21, '2019-02-04', NULL),
(40, 28, 1, 1, 7, '2019-02-04', NULL),
(41, 28, 1, 1, 15, '2019-02-04', NULL),
(42, 28, 1, 1, 4, '2019-02-04', NULL),
(43, 28, 1, 1, 5, '2019-02-04', NULL),
(44, 28, 1, 1, 21, '2019-02-04', NULL),
(45, 28, 1, 1, 2, '2019-02-04', NULL),
(46, 28, 1, 1, 6, '2019-02-04', NULL),
(47, 28, 1, 1, 16, '2019-02-04', NULL),
(48, 28, 1, 1, 10, '2019-02-04', NULL),
(49, 28, 1, 1, 22, '2019-02-04', NULL),
(50, 28, 1, 1, 23, '2019-02-04', NULL),
(51, 28, 1, 1, 1, '2019-02-04', NULL),
(52, 28, 1, 1, 18, '2019-02-04', NULL),
(53, 28, 1, 1, 25, '2019-02-04', NULL),
(54, 28, 1, 1, 3, '2019-02-04', NULL),
(55, 28, 1, 1, 20, '2019-02-04', NULL),
(56, 28, 1, 1, 24, '2019-02-04', NULL),
(57, 36, 1, 1, 10, '2019-02-04', NULL),
(58, 36, 1, 1, 3, '2019-02-04', NULL),
(59, 36, 1, 1, 7, '2019-02-04', NULL),
(60, 36, 1, 1, 6, '2019-02-04', NULL),
(61, 36, 1, 1, 25, '2019-02-04', NULL),
(62, 36, 1, 1, 15, '2019-02-04', NULL),
(63, 36, 1, 1, 5, '2019-02-04', NULL),
(64, 36, 1, 1, 4, '2019-02-04', NULL),
(65, 36, 1, 1, 23, '2019-02-04', NULL),
(66, 36, 1, 1, 16, '2019-02-04', NULL),
(67, 36, 1, 1, 24, '2019-02-04', NULL),
(68, 36, 1, 1, 19, '2019-02-04', NULL),
(69, 36, 1, 1, 17, '2019-02-04', NULL),
(70, 36, 1, 1, 14, '2019-02-04', NULL),
(71, 36, 1, 1, 22, '2019-02-04', NULL),
(72, 36, 1, 1, 18, '2019-02-04', NULL),
(73, 36, 1, 1, 20, '2019-02-04', NULL),
(74, 36, 1, 1, 8, '2019-02-04', NULL),
(75, 36, 1, 1, 1, '2019-02-04', NULL),
(76, 36, 1, 1, 2, '2019-02-04', NULL),
(77, 36, 1, 1, 21, '2019-02-04', NULL),
(78, 10, 1, 1, 21, '2019-02-04', NULL),
(79, 10, 1, 1, 10, '2019-02-04', NULL),
(80, 10, 1, 1, 2, '2019-02-04', NULL),
(81, 10, 1, 1, 19, '2019-02-04', NULL),
(82, 10, 1, 1, 4, '2019-02-04', NULL),
(83, 10, 1, 1, 7, '2019-02-04', NULL),
(84, 10, 1, 1, 1, '2019-02-04', NULL),
(85, 10, 1, 1, 16, '2019-02-04', NULL),
(86, 10, 1, 1, 5, '2019-02-04', NULL),
(87, 10, 1, 1, 18, '2019-02-04', NULL),
(88, 10, 1, 1, 22, '2019-02-04', NULL),
(89, 10, 1, 1, 8, '2019-02-04', NULL),
(90, 10, 1, 1, 6, '2019-02-04', NULL),
(91, 10, 1, 1, 24, '2019-02-04', NULL),
(92, 10, 1, 1, 15, '2019-02-04', NULL),
(93, 10, 1, 1, 20, '2019-02-04', NULL),
(94, 5, 1, 1, 23, '2019-02-04', NULL),
(95, 5, 1, 1, 21, '2019-02-04', NULL),
(96, 5, 1, 1, 8, '2019-02-04', NULL),
(97, 5, 1, 1, 3, '2019-02-04', NULL),
(98, 5, 1, 1, 2, '2019-02-04', NULL),
(99, 5, 1, 1, 5, '2019-02-04', NULL),
(100, 5, 1, 1, 16, '2019-02-04', NULL),
(101, 5, 1, 1, 1, '2019-02-04', NULL),
(102, 5, 1, 1, 22, '2019-02-04', NULL),
(103, 5, 1, 1, 6, '2019-02-04', NULL),
(104, 5, 1, 1, 14, '2019-02-04', NULL),
(105, 5, 1, 1, 17, '2019-02-04', NULL),
(106, 5, 1, 1, 19, '2019-02-04', NULL),
(107, 5, 1, 1, 18, '2019-02-04', NULL),
(108, 5, 1, 1, 7, '2019-02-04', NULL),
(109, 5, 1, 1, 15, '2019-02-04', NULL),
(110, 5, 1, 1, 24, '2019-02-04', NULL),
(111, 5, 1, 1, 10, '2019-02-04', NULL),
(112, 5, 1, 1, 4, '2019-02-04', NULL),
(113, 16, 1, 1, 10, '2019-02-04', NULL),
(114, 16, 1, 1, 15, '2019-02-04', NULL),
(115, 16, 1, 1, 5, '2019-02-04', NULL),
(116, 16, 1, 1, 3, '2019-02-04', NULL),
(117, 16, 1, 1, 7, '2019-02-04', NULL),
(118, 16, 1, 1, 21, '2019-02-04', NULL),
(119, 16, 1, 1, 16, '2019-02-04', NULL),
(120, 16, 1, 1, 1, '2019-02-04', NULL),
(121, 16, 1, 1, 19, '2019-02-04', NULL),
(122, 16, 1, 1, 2, '2019-02-04', NULL),
(123, 16, 1, 1, 20, '2019-02-04', NULL),
(124, 16, 1, 1, 17, '2019-02-04', NULL),
(125, 16, 1, 1, 6, '2019-02-04', NULL),
(126, 9, 1, 1, 2, '2019-02-04', NULL),
(127, 9, 1, 1, 22, '2019-02-04', NULL),
(128, 9, 1, 1, 10, '2019-02-04', NULL),
(129, 9, 1, 1, 1, '2019-02-04', NULL),
(130, 9, 1, 1, 7, '2019-02-04', NULL),
(131, 9, 1, 1, 6, '2019-02-04', NULL),
(132, 9, 1, 1, 18, '2019-02-04', NULL),
(133, 9, 1, 1, 4, '2019-02-04', NULL),
(134, 9, 1, 1, 5, '2019-02-04', NULL),
(135, 9, 1, 1, 3, '2019-02-04', NULL),
(136, 9, 1, 1, 17, '2019-02-04', NULL),
(137, 9, 1, 1, 14, '2019-02-04', NULL),
(138, 9, 1, 1, 15, '2019-02-04', NULL),
(139, 9, 1, 1, 25, '2019-02-04', NULL),
(140, 9, 1, 1, 8, '2019-02-04', NULL),
(141, 9, 1, 1, 16, '2019-02-04', NULL),
(142, 21, 1, 1, 3, '2019-02-04', NULL),
(143, 21, 1, 1, 2, '2019-02-04', NULL),
(144, 21, 1, 1, 1, '2019-02-04', NULL),
(145, 21, 1, 1, 17, '2019-02-04', NULL),
(146, 21, 1, 1, 18, '2019-02-04', NULL),
(147, 21, 1, 1, 21, '2019-02-04', NULL),
(148, 21, 1, 1, 14, '2019-02-04', NULL),
(149, 21, 1, 1, 6, '2019-02-04', NULL),
(150, 21, 1, 1, 10, '2019-02-04', NULL),
(151, 21, 1, 1, 15, '2019-02-04', NULL),
(152, 21, 1, 1, 5, '2019-02-04', NULL),
(153, 21, 1, 1, 16, '2019-02-04', NULL),
(154, 21, 1, 1, 19, '2019-02-04', NULL),
(155, 21, 1, 1, 22, '2019-02-04', NULL),
(156, 21, 1, 1, 7, '2019-02-04', NULL),
(157, 21, 1, 1, 20, '2019-02-04', NULL),
(158, 21, 1, 1, 4, '2019-02-04', NULL),
(159, 30, 1, 1, 16, '2019-02-04', NULL),
(160, 30, 1, 1, 4, '2019-02-04', NULL),
(161, 30, 1, 1, 19, '2019-02-04', NULL),
(162, 30, 1, 1, 25, '2019-02-04', NULL),
(163, 30, 1, 1, 10, '2019-02-04', NULL),
(164, 30, 1, 1, 3, '2019-02-04', NULL),
(165, 30, 1, 1, 5, '2019-02-04', NULL),
(166, 30, 1, 1, 1, '2019-02-04', NULL),
(167, 30, 1, 1, 22, '2019-02-04', NULL),
(168, 30, 1, 1, 2, '2019-02-04', NULL),
(169, 30, 1, 1, 18, '2019-02-04', NULL),
(170, 30, 1, 1, 20, '2019-02-04', NULL),
(171, 30, 1, 1, 17, '2019-02-04', NULL),
(172, 30, 1, 1, 7, '2019-02-04', NULL),
(173, 30, 1, 1, 15, '2019-02-04', NULL),
(174, 30, 1, 1, 6, '2019-02-04', NULL),
(175, 30, 1, 1, 14, '2019-02-04', NULL),
(176, 30, 1, 1, 21, '2019-02-04', NULL),
(177, 30, 1, 1, 23, '2019-02-04', NULL),
(178, 30, 1, 1, 8, '2019-02-04', NULL),
(179, 30, 1, 1, 24, '2019-02-04', NULL),
(180, 17, 1, 1, 14, '2019-02-04', NULL),
(181, 17, 1, 1, 6, '2019-02-04', NULL),
(182, 17, 1, 1, 23, '2019-02-04', NULL),
(183, 17, 1, 1, 3, '2019-02-04', NULL),
(184, 17, 1, 1, 1, '2019-02-04', NULL),
(185, 17, 1, 1, 15, '2019-02-04', NULL),
(186, 17, 1, 1, 7, '2019-02-04', NULL),
(187, 17, 1, 1, 2, '2019-02-04', NULL),
(188, 17, 1, 1, 24, '2019-02-04', NULL),
(189, 17, 1, 1, 22, '2019-02-04', NULL),
(190, 17, 1, 1, 19, '2019-02-04', NULL),
(191, 17, 1, 1, 17, '2019-02-04', NULL),
(192, 17, 1, 1, 10, '2019-02-04', NULL),
(193, 17, 1, 1, 18, '2019-02-04', NULL),
(194, 17, 1, 1, 5, '2019-02-04', NULL),
(195, 17, 1, 1, 16, '2019-02-04', NULL),
(196, 17, 1, 1, 8, '2019-02-04', NULL),
(197, 17, 1, 1, 21, '2019-02-04', NULL),
(198, 17, 1, 1, 4, '2019-02-04', NULL),
(199, 17, 1, 1, 20, '2019-02-04', NULL),
(200, 11, 1, 1, 19, '2019-02-04', NULL),
(201, 11, 1, 1, 8, '2019-02-04', NULL),
(202, 11, 1, 1, 3, '2019-02-04', NULL),
(203, 11, 1, 1, 23, '2019-02-04', NULL),
(204, 11, 1, 1, 20, '2019-02-04', NULL),
(205, 11, 1, 1, 16, '2019-02-04', NULL),
(206, 11, 1, 1, 7, '2019-02-04', NULL),
(207, 11, 1, 1, 18, '2019-02-04', NULL),
(208, 11, 1, 1, 15, '2019-02-04', NULL),
(209, 11, 1, 1, 1, '2019-02-04', NULL),
(210, 11, 1, 1, 2, '2019-02-04', NULL),
(211, 11, 1, 1, 17, '2019-02-04', NULL),
(212, 11, 1, 1, 6, '2019-02-04', NULL),
(213, 11, 1, 1, 10, '2019-02-04', NULL),
(214, 11, 1, 1, 21, '2019-02-04', NULL),
(215, 11, 1, 1, 14, '2019-02-04', NULL),
(216, 11, 1, 1, 22, '2019-02-04', NULL),
(217, 19, 1, 1, 3, '2019-02-04', NULL),
(218, 19, 1, 1, 16, '2019-02-04', NULL),
(219, 19, 1, 1, 14, '2019-02-04', NULL),
(220, 19, 1, 1, 1, '2019-02-04', NULL),
(221, 19, 1, 1, 7, '2019-02-04', NULL),
(222, 19, 1, 1, 17, '2019-02-04', NULL),
(223, 19, 1, 1, 5, '2019-02-04', NULL),
(224, 19, 1, 1, 4, '2019-02-04', NULL),
(225, 19, 1, 1, 24, '2019-02-04', NULL),
(226, 19, 1, 1, 6, '2019-02-04', NULL),
(227, 19, 1, 1, 23, '2019-02-04', NULL),
(228, 19, 1, 1, 15, '2019-02-04', NULL),
(229, 19, 1, 1, 2, '2019-02-04', NULL),
(230, 19, 1, 1, 10, '2019-02-04', NULL),
(231, 42, 1, 1, 18, '2019-02-04', NULL),
(232, 42, 1, 1, 14, '2019-02-04', NULL),
(233, 42, 1, 1, 17, '2019-02-04', NULL),
(234, 42, 1, 1, 10, '2019-02-04', NULL),
(235, 42, 1, 1, 19, '2019-02-04', NULL),
(236, 42, 1, 1, 22, '2019-02-04', NULL),
(237, 42, 1, 1, 1, '2019-02-04', NULL),
(238, 42, 1, 1, 15, '2019-02-04', NULL),
(239, 42, 1, 1, 5, '2019-02-04', NULL),
(240, 42, 1, 1, 21, '2019-02-04', NULL),
(241, 42, 1, 1, 3, '2019-02-04', NULL),
(242, 42, 1, 1, 20, '2019-02-04', NULL),
(243, 42, 1, 1, 2, '2019-02-04', NULL),
(244, 42, 1, 1, 7, '2019-02-04', NULL),
(245, 42, 1, 1, 6, '2019-02-04', NULL),
(246, 42, 1, 1, 4, '2019-02-04', NULL),
(247, 42, 1, 1, 16, '2019-02-04', NULL),
(248, 23, 1, 1, 7, '2019-02-04', NULL),
(249, 23, 1, 1, 2, '2019-02-04', NULL),
(250, 23, 1, 1, 1, '2019-02-04', NULL),
(251, 23, 1, 1, 21, '2019-02-04', NULL),
(252, 23, 1, 1, 6, '2019-02-04', NULL),
(253, 23, 1, 1, 3, '2019-02-04', NULL),
(254, 23, 1, 1, 5, '2019-02-04', NULL),
(255, 23, 1, 1, 8, '2019-02-04', NULL),
(256, 23, 1, 1, 22, '2019-02-04', NULL),
(257, 23, 1, 1, 16, '2019-02-04', NULL),
(258, 23, 1, 1, 18, '2019-02-04', NULL),
(259, 23, 1, 1, 20, '2019-02-04', NULL),
(260, 23, 1, 1, 17, '2019-02-04', NULL),
(261, 23, 1, 1, 10, '2019-02-04', NULL),
(262, 23, 1, 1, 15, '2019-02-04', NULL),
(263, 23, 1, 1, 23, '2019-02-04', NULL),
(264, 23, 1, 1, 19, '2019-02-04', NULL),
(265, 23, 1, 1, 4, '2019-02-04', NULL),
(266, 23, 1, 1, 24, '2019-02-04', NULL),
(267, 23, 1, 1, 14, '2019-02-04', NULL),
(268, 6, 1, 1, 3, '2019-02-04', NULL),
(269, 6, 1, 1, 6, '2019-02-04', NULL),
(270, 6, 1, 1, 7, '2019-02-04', NULL),
(271, 6, 1, 1, 2, '2019-02-04', NULL),
(272, 6, 1, 1, 23, '2019-02-04', NULL),
(273, 6, 1, 1, 10, '2019-02-04', NULL),
(274, 6, 1, 1, 18, '2019-02-04', NULL),
(275, 6, 1, 1, 8, '2019-02-04', NULL),
(276, 6, 1, 1, 25, '2019-02-04', NULL),
(277, 6, 1, 1, 5, '2019-02-04', NULL),
(278, 6, 1, 1, 22, '2019-02-04', NULL),
(279, 6, 1, 1, 16, '2019-02-04', NULL),
(280, 6, 1, 1, 24, '2019-02-04', NULL),
(281, 6, 1, 1, 4, '2019-02-04', NULL),
(282, 6, 1, 1, 19, '2019-02-04', NULL),
(283, 6, 1, 1, 21, '2019-02-04', NULL),
(284, 6, 1, 1, 20, '2019-02-04', NULL),
(285, 6, 1, 1, 17, '2019-02-04', NULL),
(286, 6, 1, 1, 1, '2019-02-04', NULL),
(287, 6, 1, 1, 15, '2019-02-04', NULL),
(288, 6, 1, 1, 14, '2019-02-04', NULL),
(289, 14, 1, 1, 5, '2019-02-04', NULL),
(290, 14, 1, 1, 1, '2019-02-04', NULL),
(291, 14, 1, 1, 10, '2019-02-04', NULL),
(292, 14, 1, 1, 2, '2019-02-04', NULL),
(293, 14, 1, 1, 4, '2019-02-04', NULL),
(294, 14, 1, 1, 15, '2019-02-04', NULL),
(295, 14, 1, 1, 14, '2019-02-04', NULL),
(296, 14, 1, 1, 24, '2019-02-04', NULL),
(297, 14, 1, 1, 20, '2019-02-04', NULL),
(298, 14, 1, 1, 17, '2019-02-04', NULL),
(299, 14, 1, 1, 6, '2019-02-04', NULL),
(300, 14, 1, 1, 22, '2019-02-04', NULL),
(301, 14, 1, 1, 3, '2019-02-04', NULL),
(302, 14, 1, 1, 7, '2019-02-04', NULL),
(303, 14, 1, 1, 21, '2019-02-04', NULL),
(304, 14, 1, 1, 25, '2019-02-04', NULL),
(305, 14, 1, 1, 23, '2019-02-04', NULL),
(306, 25, 1, 1, 14, '2019-02-04', NULL),
(307, 25, 1, 1, 25, '2019-02-04', NULL),
(308, 25, 1, 1, 15, '2019-02-04', NULL),
(309, 25, 1, 1, 16, '2019-02-04', NULL),
(310, 25, 1, 1, 6, '2019-02-04', NULL),
(311, 25, 1, 1, 2, '2019-02-04', NULL),
(312, 25, 1, 1, 21, '2019-02-04', NULL),
(313, 25, 1, 1, 8, '2019-02-04', NULL),
(314, 25, 1, 1, 24, '2019-02-04', NULL),
(315, 25, 1, 1, 10, '2019-02-04', NULL),
(316, 25, 1, 1, 22, '2019-02-04', NULL),
(317, 25, 1, 1, 4, '2019-02-04', NULL),
(318, 25, 1, 1, 5, '2019-02-04', NULL),
(319, 25, 1, 1, 19, '2019-02-04', NULL),
(320, 25, 1, 1, 3, '2019-02-04', NULL),
(321, 25, 1, 1, 1, '2019-02-04', NULL),
(322, 25, 1, 1, 17, '2019-02-04', NULL),
(323, 25, 1, 1, 20, '2019-02-04', NULL),
(324, 25, 1, 1, 7, '2019-02-04', NULL),
(325, 25, 1, 1, 18, '2019-02-04', NULL),
(326, 38, 1, 1, 10, '2019-02-04', NULL),
(327, 38, 1, 1, 8, '2019-02-04', NULL),
(328, 38, 1, 1, 25, '2019-02-04', NULL),
(329, 38, 1, 1, 16, '2019-02-04', NULL),
(330, 38, 1, 1, 5, '2019-02-04', NULL),
(331, 38, 1, 1, 22, '2019-02-04', NULL),
(332, 38, 1, 1, 6, '2019-02-04', NULL),
(333, 38, 1, 1, 7, '2019-02-04', NULL),
(334, 38, 1, 1, 1, '2019-02-04', NULL),
(335, 38, 1, 1, 24, '2019-02-04', NULL),
(336, 38, 1, 1, 2, '2019-02-04', NULL),
(337, 38, 1, 1, 4, '2019-02-04', NULL),
(338, 38, 1, 1, 3, '2019-02-04', NULL),
(339, 38, 1, 1, 19, '2019-02-04', NULL),
(340, 38, 1, 1, 21, '2019-02-04', NULL),
(341, 38, 1, 1, 14, '2019-02-04', NULL),
(342, 38, 1, 1, 15, '2019-02-04', NULL),
(343, 26, 1, 1, 4, '2019-02-04', NULL),
(344, 26, 1, 1, 20, '2019-02-04', NULL),
(345, 26, 1, 1, 24, '2019-02-04', NULL),
(346, 26, 1, 1, 7, '2019-02-04', NULL),
(347, 26, 1, 1, 17, '2019-02-04', NULL),
(348, 26, 1, 1, 2, '2019-02-04', NULL),
(349, 26, 1, 1, 6, '2019-02-04', NULL),
(350, 26, 1, 1, 8, '2019-02-04', NULL),
(351, 26, 1, 1, 22, '2019-02-04', NULL),
(352, 26, 1, 1, 14, '2019-02-04', NULL),
(353, 26, 1, 1, 5, '2019-02-04', NULL),
(354, 26, 1, 1, 16, '2019-02-04', NULL),
(355, 26, 1, 1, 15, '2019-02-04', NULL),
(356, 26, 1, 1, 19, '2019-02-04', NULL),
(357, 26, 1, 1, 10, '2019-02-04', NULL),
(358, 26, 1, 1, 1, '2019-02-04', NULL),
(359, 26, 1, 1, 18, '2019-02-04', NULL),
(360, 26, 1, 1, 21, '2019-02-04', NULL),
(361, 18, 1, 1, 6, '2019-02-04', NULL),
(362, 18, 1, 1, 19, '2019-02-04', NULL),
(363, 18, 1, 1, 3, '2019-02-04', NULL),
(364, 18, 1, 1, 15, '2019-02-04', NULL),
(365, 18, 1, 1, 14, '2019-02-04', NULL),
(366, 18, 1, 1, 18, '2019-02-04', NULL),
(367, 18, 1, 1, 22, '2019-02-04', NULL),
(368, 18, 1, 1, 4, '2019-02-04', NULL),
(369, 18, 1, 1, 21, '2019-02-04', NULL),
(370, 18, 1, 1, 7, '2019-02-04', NULL),
(371, 18, 1, 1, 2, '2019-02-04', NULL),
(372, 18, 1, 1, 1, '2019-02-04', NULL),
(373, 18, 1, 1, 16, '2019-02-04', NULL),
(374, 18, 1, 1, 10, '2019-02-04', NULL),
(375, 18, 1, 1, 5, '2019-02-04', NULL),
(376, 27, 1, 1, 25, '2019-02-04', NULL),
(377, 27, 1, 1, 2, '2019-02-04', NULL),
(378, 27, 1, 1, 21, '2019-02-04', NULL),
(379, 27, 1, 1, 5, '2019-02-04', NULL),
(380, 27, 1, 1, 3, '2019-02-04', NULL),
(381, 27, 1, 1, 19, '2019-02-04', NULL),
(382, 27, 1, 1, 7, '2019-02-04', NULL),
(383, 27, 1, 1, 10, '2019-02-04', NULL),
(384, 27, 1, 1, 16, '2019-02-04', NULL),
(385, 27, 1, 1, 6, '2019-02-04', NULL),
(386, 27, 1, 1, 15, '2019-02-04', NULL),
(387, 27, 1, 1, 1, '2019-02-04', NULL),
(388, 27, 1, 1, 18, '2019-02-04', NULL),
(389, 27, 1, 1, 24, '2019-02-04', NULL),
(390, 27, 1, 1, 4, '2019-02-04', NULL),
(391, 27, 1, 1, 8, '2019-02-04', NULL),
(392, 27, 1, 1, 14, '2019-02-04', NULL),
(393, 27, 1, 1, 22, '2019-02-04', NULL),
(394, 27, 1, 1, 20, '2019-02-04', NULL),
(395, 22, 1, 1, 19, '2019-02-04', NULL),
(396, 22, 1, 1, 1, '2019-02-04', NULL),
(397, 22, 1, 1, 4, '2019-02-04', NULL),
(398, 22, 1, 1, 10, '2019-02-04', NULL),
(399, 22, 1, 1, 3, '2019-02-04', NULL),
(400, 22, 1, 1, 5, '2019-02-04', NULL),
(401, 22, 1, 1, 21, '2019-02-04', NULL),
(402, 22, 1, 1, 18, '2019-02-04', NULL),
(403, 22, 1, 1, 7, '2019-02-04', NULL),
(404, 22, 1, 1, 25, '2019-02-04', NULL),
(405, 22, 1, 1, 16, '2019-02-04', NULL),
(406, 22, 1, 1, 17, '2019-02-04', NULL),
(407, 22, 1, 1, 6, '2019-02-04', NULL),
(408, 22, 1, 1, 14, '2019-02-04', NULL),
(409, 22, 1, 1, 15, '2019-02-04', NULL),
(410, 22, 1, 1, 8, '2019-02-04', NULL),
(411, 22, 1, 1, 2, '2019-02-04', NULL),
(412, 20, 1, 1, 6, '2019-02-04', NULL),
(413, 20, 1, 1, 1, '2019-02-04', NULL),
(414, 20, 1, 1, 2, '2019-02-04', NULL),
(415, 20, 1, 1, 19, '2019-02-04', NULL),
(416, 20, 1, 1, 21, '2019-02-04', NULL),
(417, 20, 1, 1, 22, '2019-02-04', NULL),
(418, 20, 1, 1, 7, '2019-02-04', NULL),
(419, 20, 1, 1, 4, '2019-02-04', NULL),
(420, 20, 1, 1, 16, '2019-02-04', NULL),
(421, 20, 1, 1, 10, '2019-02-04', NULL),
(422, 20, 1, 1, 15, '2019-02-04', NULL),
(423, 20, 1, 1, 3, '2019-02-04', NULL),
(424, 20, 1, 1, 5, '2019-02-04', NULL),
(425, 20, 1, 1, 14, '2019-02-04', NULL),
(426, 20, 1, 1, 18, '2019-02-04', NULL),
(427, 29, 1, 1, 4, '2019-02-04', NULL),
(428, 29, 1, 1, 18, '2019-02-04', NULL),
(429, 29, 1, 1, 21, '2019-02-04', NULL),
(430, 29, 1, 1, 22, '2019-02-04', NULL),
(431, 29, 1, 1, 17, '2019-02-04', NULL),
(432, 29, 1, 1, 20, '2019-02-04', NULL),
(433, 29, 1, 1, 1, '2019-02-04', NULL),
(434, 29, 1, 1, 19, '2019-02-04', NULL),
(435, 29, 1, 1, 15, '2019-02-04', NULL),
(436, 29, 1, 1, 7, '2019-02-04', NULL),
(437, 29, 1, 1, 10, '2019-02-04', NULL),
(438, 29, 1, 1, 16, '2019-02-04', NULL),
(439, 29, 1, 1, 14, '2019-02-04', NULL),
(440, 29, 1, 1, 6, '2019-02-04', NULL),
(441, 29, 1, 1, 5, '2019-02-04', NULL),
(442, 29, 1, 1, 24, '2019-02-04', NULL),
(443, 29, 1, 1, 3, '2019-02-04', NULL),
(444, 41, 1, 1, 22, '2019-02-04', NULL),
(445, 41, 1, 1, 3, '2019-02-04', NULL),
(446, 41, 1, 1, 6, '2019-02-04', NULL),
(447, 41, 1, 1, 4, '2019-02-04', NULL),
(448, 41, 1, 1, 7, '2019-02-04', NULL),
(449, 41, 1, 1, 20, '2019-02-04', NULL),
(450, 41, 1, 1, 8, '2019-02-04', NULL),
(451, 41, 1, 1, 25, '2019-02-04', NULL),
(452, 41, 1, 1, 18, '2019-02-04', NULL),
(453, 41, 1, 1, 16, '2019-02-04', NULL),
(454, 41, 1, 1, 1, '2019-02-04', NULL),
(455, 41, 1, 1, 2, '2019-02-04', NULL),
(456, 41, 1, 1, 5, '2019-02-04', NULL),
(457, 41, 1, 1, 10, '2019-02-04', NULL),
(458, 41, 1, 1, 19, '2019-02-04', NULL),
(459, 41, 1, 1, 24, '2019-02-04', NULL),
(460, 41, 1, 1, 14, '2019-02-04', NULL),
(461, 41, 1, 1, 15, '2019-02-04', NULL),
(462, 24, 1, 1, 3, '2019-02-04', NULL),
(463, 24, 1, 1, 10, '2019-02-04', NULL),
(464, 24, 1, 1, 14, '2019-02-04', NULL),
(465, 24, 1, 1, 19, '2019-02-04', NULL),
(466, 24, 1, 1, 5, '2019-02-04', NULL),
(467, 24, 1, 1, 22, '2019-02-04', NULL),
(468, 24, 1, 1, 6, '2019-02-04', NULL),
(469, 24, 1, 1, 17, '2019-02-04', NULL),
(470, 24, 1, 1, 1, '2019-02-04', NULL),
(471, 24, 1, 1, 21, '2019-02-04', NULL),
(472, 24, 1, 1, 2, '2019-02-04', NULL),
(473, 24, 1, 1, 23, '2019-02-04', NULL),
(474, 24, 1, 1, 8, '2019-02-04', NULL),
(475, 15, 1, 1, 22, '2019-02-04', NULL),
(476, 15, 1, 1, 5, '2019-02-04', NULL),
(477, 15, 1, 1, 8, '2019-02-04', NULL),
(478, 15, 1, 1, 15, '2019-02-04', NULL),
(479, 15, 1, 1, 17, '2019-02-04', NULL),
(480, 15, 1, 1, 24, '2019-02-04', NULL),
(481, 15, 1, 1, 7, '2019-02-04', NULL),
(482, 15, 1, 1, 1, '2019-02-04', NULL),
(483, 15, 1, 1, 6, '2019-02-04', NULL),
(484, 15, 1, 1, 4, '2019-02-04', NULL),
(485, 15, 1, 1, 20, '2019-02-04', NULL),
(486, 15, 1, 1, 23, '2019-02-04', NULL),
(487, 15, 1, 1, 18, '2019-02-04', NULL),
(488, 15, 1, 1, 16, '2019-02-04', NULL),
(489, 15, 1, 1, 10, '2019-02-04', NULL),
(490, 15, 1, 1, 3, '2019-02-04', NULL),
(491, 15, 1, 1, 14, '2019-02-04', NULL),
(492, 15, 1, 1, 19, '2019-02-04', NULL),
(493, 15, 1, 1, 21, '2019-02-04', NULL),
(494, 15, 1, 1, 2, '2019-02-04', NULL),
(495, 34, 1, 1, 17, '2019-02-04', NULL),
(496, 34, 1, 1, 22, '2019-02-04', NULL),
(497, 34, 1, 1, 3, '2019-02-04', NULL),
(498, 34, 1, 1, 23, '2019-02-04', NULL),
(499, 34, 1, 1, 19, '2019-02-04', NULL),
(500, 34, 1, 1, 6, '2019-02-04', NULL),
(501, 34, 1, 1, 16, '2019-02-04', NULL),
(502, 34, 1, 1, 8, '2019-02-04', NULL),
(503, 34, 1, 1, 4, '2019-02-04', NULL),
(504, 34, 1, 1, 5, '2019-02-04', NULL),
(505, 34, 1, 1, 14, '2019-02-04', NULL),
(506, 34, 1, 1, 1, '2019-02-04', NULL),
(507, 34, 1, 1, 2, '2019-02-04', NULL),
(508, 34, 1, 1, 20, '2019-02-04', NULL),
(509, 34, 1, 1, 10, '2019-02-04', NULL),
(510, 34, 1, 1, 7, '2019-02-04', NULL),
(511, 33, 1, 1, 15, '2019-02-04', NULL),
(512, 33, 1, 1, 2, '2019-02-04', NULL),
(513, 33, 1, 1, 14, '2019-02-04', NULL),
(514, 33, 1, 1, 19, '2019-02-04', NULL),
(515, 33, 1, 1, 4, '2019-02-04', NULL),
(516, 33, 1, 1, 23, '2019-02-04', NULL),
(517, 33, 1, 1, 24, '2019-02-04', NULL),
(518, 33, 1, 1, 20, '2019-02-04', NULL),
(519, 33, 1, 1, 6, '2019-02-04', NULL),
(520, 33, 1, 1, 17, '2019-02-04', NULL),
(521, 33, 1, 1, 7, '2019-02-04', NULL),
(522, 33, 1, 1, 22, '2019-02-04', NULL),
(523, 33, 1, 1, 25, '2019-02-04', NULL),
(524, 33, 1, 1, 1, '2019-02-04', NULL),
(525, 33, 1, 1, 3, '2019-02-04', NULL),
(526, 33, 1, 1, 5, '2019-02-04', NULL),
(527, 33, 1, 1, 16, '2019-02-04', NULL),
(528, 33, 1, 1, 18, '2019-02-04', NULL),
(529, 33, 1, 1, 10, '2019-02-04', NULL),
(530, 33, 1, 1, 21, '2019-02-04', NULL),
(531, 33, 1, 1, 8, '2019-02-04', NULL),
(532, 46, 1, 1, 21, '2019-02-04', NULL),
(533, 46, 1, 1, 3, '2019-02-04', NULL),
(534, 46, 1, 1, 22, '2019-02-04', NULL),
(535, 46, 1, 1, 5, '2019-02-04', NULL),
(536, 46, 1, 1, 17, '2019-02-04', NULL),
(537, 46, 1, 1, 20, '2019-02-04', NULL),
(538, 46, 1, 1, 10, '2019-02-04', NULL),
(539, 46, 1, 1, 8, '2019-02-04', NULL),
(540, 46, 1, 1, 6, '2019-02-04', NULL),
(541, 46, 1, 1, 4, '2019-02-04', NULL),
(542, 46, 1, 1, 24, '2019-02-04', NULL),
(543, 46, 1, 1, 14, '2019-02-04', NULL),
(544, 46, 1, 1, 19, '2019-02-04', NULL),
(545, 46, 1, 1, 23, '2019-02-04', NULL),
(546, 46, 1, 1, 2, '2019-02-04', NULL),
(547, 46, 1, 1, 1, '2019-02-04', NULL),
(548, 46, 1, 1, 15, '2019-02-04', NULL),
(549, 46, 1, 1, 7, '2019-02-04', NULL),
(550, 46, 1, 1, 18, '2019-02-04', NULL),
(551, 46, 1, 1, 16, '2019-02-04', NULL),
(552, 39, 1, 1, 3, '2019-02-04', NULL),
(553, 39, 1, 1, 7, '2019-02-04', NULL),
(554, 39, 1, 1, 15, '2019-02-04', NULL),
(555, 39, 1, 1, 10, '2019-02-04', NULL),
(556, 39, 1, 1, 1, '2019-02-04', NULL),
(557, 39, 1, 1, 22, '2019-02-04', NULL),
(558, 39, 1, 1, 2, '2019-02-04', NULL),
(559, 39, 1, 1, 24, '2019-02-04', NULL),
(560, 39, 1, 1, 17, '2019-02-04', NULL),
(561, 39, 1, 1, 5, '2019-02-04', NULL),
(562, 39, 1, 1, 14, '2019-02-04', NULL),
(563, 39, 1, 1, 6, '2019-02-04', NULL),
(564, 39, 1, 1, 16, '2019-02-04', NULL),
(565, 39, 1, 1, 23, '2019-02-04', NULL),
(566, 39, 1, 1, 4, '2019-02-04', NULL),
(567, 7, 1, 1, 17, '2019-02-04', NULL),
(568, 7, 1, 1, 8, '2019-02-04', NULL),
(569, 7, 1, 1, 4, '2019-02-04', NULL),
(570, 7, 1, 1, 1, '2019-02-04', NULL),
(571, 7, 1, 1, 19, '2019-02-04', NULL),
(572, 7, 1, 1, 5, '2019-02-04', NULL),
(573, 7, 1, 1, 14, '2019-02-04', NULL),
(574, 7, 1, 1, 20, '2019-02-04', NULL),
(575, 7, 1, 1, 23, '2019-02-04', NULL),
(576, 7, 1, 1, 10, '2019-02-04', NULL),
(577, 7, 1, 1, 15, '2019-02-04', NULL),
(578, 7, 1, 1, 16, '2019-02-04', NULL),
(579, 7, 1, 1, 6, '2019-02-04', NULL),
(580, 7, 1, 1, 2, '2019-02-04', NULL),
(581, 7, 1, 1, 3, '2019-02-04', NULL),
(582, 40, 1, 1, 4, '2019-02-04', NULL),
(583, 40, 1, 1, 5, '2019-02-04', NULL),
(584, 40, 1, 1, 18, '2019-02-04', NULL),
(585, 40, 1, 1, 19, '2019-02-04', NULL),
(586, 40, 1, 1, 25, '2019-02-04', NULL),
(587, 40, 1, 1, 15, '2019-02-04', NULL),
(588, 40, 1, 1, 6, '2019-02-04', NULL),
(589, 40, 1, 1, 10, '2019-02-04', NULL),
(590, 40, 1, 1, 2, '2019-02-04', NULL),
(591, 40, 1, 1, 1, '2019-02-04', NULL),
(592, 40, 1, 1, 7, '2019-02-04', NULL),
(593, 40, 1, 1, 14, '2019-02-04', NULL),
(594, 40, 1, 1, 16, '2019-02-04', NULL),
(595, 40, 1, 1, 3, '2019-02-04', NULL),
(596, 44, 1, 1, 2, '2019-02-04', NULL),
(597, 44, 1, 1, 25, '2019-02-04', NULL),
(598, 44, 1, 1, 16, '2019-02-04', NULL),
(599, 44, 1, 1, 24, '2019-02-04', NULL),
(600, 44, 1, 1, 18, '2019-02-04', NULL),
(601, 44, 1, 1, 19, '2019-02-04', NULL),
(602, 44, 1, 1, 8, '2019-02-04', NULL),
(603, 44, 1, 1, 6, '2019-02-04', NULL),
(604, 44, 1, 1, 21, '2019-02-04', NULL),
(605, 44, 1, 1, 15, '2019-02-04', NULL),
(606, 44, 1, 1, 5, '2019-02-04', NULL),
(607, 44, 1, 1, 17, '2019-02-04', NULL),
(608, 44, 1, 1, 23, '2019-02-04', NULL),
(609, 44, 1, 1, 4, '2019-02-04', NULL),
(610, 44, 1, 1, 3, '2019-02-04', NULL),
(611, 44, 1, 1, 14, '2019-02-04', NULL),
(612, 44, 1, 1, 1, '2019-02-04', NULL),
(613, 44, 1, 1, 22, '2019-02-04', NULL),
(614, 44, 1, 1, 7, '2019-02-04', NULL),
(615, 44, 1, 1, 10, '2019-02-04', NULL),
(616, 37, 1, 1, 15, '2019-02-04', NULL),
(617, 37, 1, 1, 16, '2019-02-04', NULL),
(618, 37, 1, 1, 5, '2019-02-04', NULL),
(619, 37, 1, 1, 8, '2019-02-04', NULL),
(620, 37, 1, 1, 21, '2019-02-04', NULL),
(621, 37, 1, 1, 10, '2019-02-04', NULL),
(622, 37, 1, 1, 20, '2019-02-04', NULL),
(623, 37, 1, 1, 1, '2019-02-04', NULL),
(624, 37, 1, 1, 6, '2019-02-04', NULL),
(625, 37, 1, 1, 17, '2019-02-04', NULL),
(626, 37, 1, 1, 14, '2019-02-04', NULL),
(627, 37, 1, 1, 18, '2019-02-04', NULL),
(628, 37, 1, 1, 2, '2019-02-04', NULL),
(629, 37, 1, 1, 7, '2019-02-04', NULL),
(630, 37, 1, 1, 24, '2019-02-04', NULL),
(631, 37, 1, 1, 22, '2019-02-04', NULL),
(632, 37, 1, 1, 19, '2019-02-04', NULL),
(633, 37, 1, 1, 3, '2019-02-04', NULL),
(634, 37, 1, 1, 4, '2019-02-04', NULL),
(635, 47, 1, 1, 7, '2019-02-04', NULL),
(636, 47, 1, 1, 23, '2019-02-04', NULL),
(637, 47, 1, 1, 6, '2019-02-04', NULL),
(638, 47, 1, 1, 16, '2019-02-04', NULL),
(639, 47, 1, 1, 8, '2019-02-04', NULL),
(640, 47, 1, 1, 14, '2019-02-04', NULL),
(641, 47, 1, 1, 24, '2019-02-04', NULL),
(642, 47, 1, 1, 17, '2019-02-04', NULL),
(643, 47, 1, 1, 1, '2019-02-04', NULL),
(644, 47, 1, 1, 22, '2019-02-04', NULL),
(645, 47, 1, 1, 20, '2019-02-04', NULL),
(646, 47, 1, 1, 10, '2019-02-04', NULL),
(647, 47, 1, 1, 3, '2019-02-04', NULL),
(648, 47, 1, 1, 21, '2019-02-04', NULL),
(649, 47, 1, 1, 4, '2019-02-04', NULL),
(650, 47, 1, 1, 19, '2019-02-04', NULL),
(651, 47, 1, 1, 18, '2019-02-04', NULL),
(652, 47, 1, 1, 15, '2019-02-04', NULL),
(653, 47, 1, 1, 25, '2019-02-04', NULL),
(654, 47, 1, 1, 2, '2019-02-04', NULL),
(655, 47, 1, 1, 5, '2019-02-04', NULL),
(656, 8, 1, 1, 15, '2019-02-04', NULL),
(657, 8, 1, 1, 7, '2019-02-04', NULL),
(658, 8, 1, 1, 21, '2019-02-04', NULL),
(659, 8, 1, 1, 1, '2019-02-04', NULL),
(660, 8, 1, 1, 10, '2019-02-04', NULL),
(661, 8, 1, 1, 22, '2019-02-04', NULL),
(662, 8, 1, 1, 5, '2019-02-04', NULL),
(663, 8, 1, 1, 6, '2019-02-04', NULL),
(664, 8, 1, 1, 19, '2019-02-04', NULL),
(665, 8, 1, 1, 20, '2019-02-04', NULL),
(666, 8, 1, 1, 25, '2019-02-04', NULL),
(667, 8, 1, 1, 23, '2019-02-04', NULL),
(668, 8, 1, 1, 14, '2019-02-04', NULL),
(669, 8, 1, 1, 24, '2019-02-04', NULL),
(670, 8, 1, 1, 17, '2019-02-04', NULL),
(671, 8, 1, 1, 18, '2019-02-04', NULL),
(672, 8, 1, 1, 3, '2019-02-04', NULL),
(673, 8, 1, 1, 8, '2019-02-04', NULL),
(674, 8, 1, 1, 4, '2019-02-04', NULL),
(675, 8, 1, 1, 16, '2019-02-04', NULL),
(676, 8, 1, 1, 2, '2019-02-04', NULL),
(677, 51, 1, 1, 18, '2019-02-04', NULL),
(678, 51, 1, 1, 21, '2019-02-04', NULL),
(679, 51, 1, 1, 4, '2019-02-04', NULL),
(680, 51, 1, 1, 3, '2019-02-04', NULL),
(681, 51, 1, 1, 17, '2019-02-04', NULL),
(682, 51, 1, 1, 5, '2019-02-04', NULL),
(683, 51, 1, 1, 8, '2019-02-04', NULL),
(684, 51, 1, 1, 14, '2019-02-04', NULL),
(685, 51, 1, 1, 24, '2019-02-04', NULL),
(686, 51, 1, 1, 20, '2019-02-04', NULL),
(687, 51, 1, 1, 22, '2019-02-04', NULL),
(688, 51, 1, 1, 16, '2019-02-04', NULL),
(689, 51, 1, 1, 2, '2019-02-04', NULL),
(690, 51, 1, 1, 7, '2019-02-04', NULL),
(691, 51, 1, 1, 10, '2019-02-04', NULL),
(692, 51, 1, 1, 15, '2019-02-04', NULL),
(693, 51, 1, 1, 1, '2019-02-04', NULL),
(694, 51, 1, 1, 6, '2019-02-04', NULL),
(695, 51, 1, 1, 23, '2019-02-04', NULL),
(696, 51, 1, 1, 19, '2019-02-04', NULL),
(697, 12, 1, 1, 20, '2019-02-04', NULL),
(698, 12, 1, 1, 2, '2019-02-04', NULL),
(699, 12, 1, 1, 10, '2019-02-04', NULL),
(700, 12, 1, 1, 6, '2019-02-04', NULL),
(701, 12, 1, 1, 15, '2019-02-04', NULL),
(702, 12, 1, 1, 23, '2019-02-04', NULL),
(703, 12, 1, 1, 1, '2019-02-04', NULL),
(704, 12, 1, 1, 21, '2019-02-04', NULL),
(705, 12, 1, 1, 3, '2019-02-04', NULL),
(706, 12, 1, 1, 18, '2019-02-04', NULL),
(707, 12, 1, 1, 14, '2019-02-04', NULL),
(708, 12, 1, 1, 16, '2019-02-04', NULL),
(709, 12, 1, 1, 17, '2019-02-04', NULL),
(710, 12, 1, 1, 4, '2019-02-04', NULL),
(711, 12, 1, 1, 24, '2019-02-04', NULL),
(712, 12, 1, 1, 5, '2019-02-04', NULL),
(713, 12, 1, 1, 7, '2019-02-04', NULL),
(714, 12, 1, 1, 8, '2019-02-04', NULL),
(715, 12, 1, 1, 22, '2019-02-04', NULL),
(716, 12, 1, 1, 19, '2019-02-04', NULL),
(717, 45, 1, 1, 8, '2019-02-04', NULL),
(718, 45, 1, 1, 15, '2019-02-04', NULL),
(719, 45, 1, 1, 3, '2019-02-04', NULL),
(720, 45, 1, 1, 17, '2019-02-04', NULL),
(721, 45, 1, 1, 1, '2019-02-04', NULL),
(722, 45, 1, 1, 7, '2019-02-04', NULL),
(723, 45, 1, 1, 18, '2019-02-04', NULL),
(724, 45, 1, 1, 21, '2019-02-04', NULL),
(725, 45, 1, 1, 24, '2019-02-04', NULL),
(726, 45, 1, 1, 4, '2019-02-04', NULL),
(727, 45, 1, 1, 2, '2019-02-04', NULL),
(728, 45, 1, 1, 19, '2019-02-04', NULL),
(729, 45, 1, 1, 14, '2019-02-04', NULL),
(730, 45, 1, 1, 25, '2019-02-04', NULL),
(731, 45, 1, 1, 10, '2019-02-04', NULL),
(732, 45, 1, 1, 23, '2019-02-04', NULL),
(733, 45, 1, 1, 22, '2019-02-04', NULL),
(734, 45, 1, 1, 6, '2019-02-04', NULL),
(735, 45, 1, 1, 20, '2019-02-04', NULL),
(736, 45, 1, 1, 5, '2019-02-04', NULL),
(737, 48, 1, 1, 14, '2019-02-04', NULL),
(738, 48, 1, 1, 21, '2019-02-04', NULL),
(739, 48, 1, 1, 23, '2019-02-04', NULL),
(740, 48, 1, 1, 25, '2019-02-04', NULL),
(741, 48, 1, 1, 1, '2019-02-04', NULL),
(742, 48, 1, 1, 19, '2019-02-04', NULL),
(743, 48, 1, 1, 4, '2019-02-04', NULL),
(744, 48, 1, 1, 8, '2019-02-04', NULL),
(745, 48, 1, 1, 24, '2019-02-04', NULL),
(746, 48, 1, 1, 3, '2019-02-04', NULL),
(747, 48, 1, 1, 10, '2019-02-04', NULL),
(748, 48, 1, 1, 18, '2019-02-04', NULL),
(749, 48, 1, 1, 20, '2019-02-04', NULL),
(750, 48, 1, 1, 6, '2019-02-04', NULL),
(751, 48, 1, 1, 15, '2019-02-04', NULL),
(752, 48, 1, 1, 5, '2019-02-04', NULL),
(753, 48, 1, 1, 22, '2019-02-04', NULL),
(754, 48, 1, 1, 2, '2019-02-04', NULL),
(755, 48, 1, 1, 17, '2019-02-04', NULL),
(756, 48, 1, 1, 7, '2019-02-04', NULL),
(757, 48, 1, 1, 16, '2019-02-04', NULL),
(758, 31, 1, 1, 16, '2019-02-04', NULL),
(759, 31, 1, 1, 6, '2019-02-04', NULL),
(760, 31, 1, 1, 4, '2019-02-04', NULL),
(761, 31, 1, 1, 19, '2019-02-04', NULL),
(762, 31, 1, 1, 14, '2019-02-04', NULL),
(763, 31, 1, 1, 7, '2019-02-04', NULL),
(764, 31, 1, 1, 20, '2019-02-04', NULL),
(765, 31, 1, 1, 15, '2019-02-04', NULL),
(766, 31, 1, 1, 3, '2019-02-04', NULL),
(767, 31, 1, 1, 17, '2019-02-04', NULL),
(768, 31, 1, 1, 5, '2019-02-04', NULL),
(769, 31, 1, 1, 23, '2019-02-04', NULL),
(770, 31, 1, 1, 18, '2019-02-04', NULL),
(771, 31, 1, 1, 10, '2019-02-04', NULL),
(772, 31, 1, 1, 1, '2019-02-04', NULL),
(773, 31, 1, 1, 2, '2019-02-04', NULL),
(774, 31, 1, 1, 21, '2019-02-04', NULL),
(775, 31, 1, 1, 24, '2019-02-04', NULL),
(776, 31, 1, 1, 22, '2019-02-04', NULL),
(777, 35, 1, 1, 7, '2019-02-04', NULL),
(778, 35, 1, 1, 3, '2019-02-04', NULL),
(779, 35, 1, 1, 24, '2019-02-04', NULL),
(780, 35, 1, 1, 2, '2019-02-04', NULL),
(781, 35, 1, 1, 25, '2019-02-04', NULL),
(782, 35, 1, 1, 1, '2019-02-04', NULL),
(783, 35, 1, 1, 14, '2019-02-04', NULL),
(784, 35, 1, 1, 6, '2019-02-04', NULL),
(785, 35, 1, 1, 18, '2019-02-04', NULL),
(786, 35, 1, 1, 19, '2019-02-04', NULL),
(787, 35, 1, 1, 5, '2019-02-04', NULL),
(788, 35, 1, 1, 10, '2019-02-04', NULL),
(789, 35, 1, 1, 21, '2019-02-04', NULL),
(790, 35, 1, 1, 8, '2019-02-04', NULL),
(791, 35, 1, 1, 23, '2019-02-04', NULL),
(792, 35, 1, 1, 15, '2019-02-04', NULL),
(793, 35, 1, 1, 22, '2019-02-04', NULL),
(794, 35, 1, 1, 4, '2019-02-04', NULL),
(795, 35, 1, 1, 20, '2019-02-04', NULL),
(796, 35, 1, 1, 16, '2019-02-04', NULL),
(797, 35, 1, 1, 17, '2019-02-04', NULL),
(798, 52, 1, 1, 3, '2019-02-04', NULL),
(799, 52, 1, 1, 20, '2019-02-04', NULL),
(800, 52, 1, 1, 18, '2019-02-04', NULL),
(801, 52, 1, 1, 15, '2019-02-04', NULL),
(802, 52, 1, 1, 16, '2019-02-04', NULL),
(803, 52, 1, 1, 22, '2019-02-04', NULL),
(804, 52, 1, 1, 14, '2019-02-04', NULL),
(805, 52, 1, 1, 4, '2019-02-04', NULL),
(806, 52, 1, 1, 2, '2019-02-04', NULL),
(807, 52, 1, 1, 1, '2019-02-04', NULL),
(808, 52, 1, 1, 7, '2019-02-04', NULL),
(809, 52, 1, 1, 19, '2019-02-04', NULL),
(810, 52, 1, 1, 6, '2019-02-04', NULL),
(811, 72, 2, 2, 27, '2019-02-05', 0),
(812, 72, 2, 2, 26, '2019-02-05', 1),
(813, 72, 2, 2, 29, '2019-02-05', 1),
(814, 72, 2, 2, 28, '2019-02-05', 2),
(815, 72, 2, 2, 30, '2019-02-05', 0),
(816, 75, 2, 2, 30, '2019-02-05', 2),
(817, 75, 2, 2, 27, '2019-02-05', 0),
(818, 75, 2, 2, 29, '2019-02-05', 2),
(819, 75, 2, 2, 26, '2019-02-05', 1),
(820, 75, 2, 2, 28, '2019-02-05', 2),
(821, 4, 3, 3, 31, '2019-02-05', NULL),
(822, 4, 3, 3, 32, '2019-02-05', NULL),
(823, 22, 2, 2, 29, '2019-02-05', NULL),
(824, 22, 2, 2, 27, '2019-02-05', NULL),
(825, 22, 2, 2, 28, '2019-02-05', NULL),
(826, 22, 2, 2, 26, '2019-02-05', NULL),
(827, 22, 2, 2, 30, '2019-02-05', NULL),
(828, 72, 4, 4, 36, '2019-02-06', 2),
(829, 30, 3, 3, 31, '2019-02-09', NULL),
(830, 81, 10, 10, 52, '2019-02-20', 2),
(831, 81, 10, 10, 49, '2019-02-20', 2),
(832, 81, 10, 10, 53, '2019-02-20', 2),
(833, 81, 10, 10, 50, '2019-02-20', 2),
(834, 81, 10, 10, 55, '2019-02-20', 2),
(835, 81, 10, 10, 56, '2019-02-20', 2),
(836, 81, 10, 10, 47, '2019-02-20', 1),
(837, 81, 10, 10, 48, '2019-02-20', 0),
(838, 81, 10, 10, 51, '2019-02-20', 0),
(839, 81, 11, 11, 58, '2019-02-20', 2),
(840, 81, 11, 11, 62, '2019-02-20', 2),
(841, 81, 11, 11, 64, '2019-02-20', 2),
(842, 81, 11, 11, 57, '2019-02-20', 2),
(843, 81, 11, 11, 60, '2019-02-20', 2),
(844, 81, 11, 11, 63, '2019-02-20', 2),
(845, 81, 11, 11, 67, '2019-02-20', 0),
(846, 81, 11, 11, 66, '2019-02-20', 2),
(847, 81, 11, 11, 59, '2019-02-20', 0),
(848, 81, 11, 11, 65, '2019-02-20', 0);

-- --------------------------------------------------------

--
-- Table structure for table `tblUserRegistration`
--

CREATE TABLE `tblUserRegistration` (
  `UserID` int(11) NOT NULL,
  `FirstName` varchar(100) DEFAULT NULL,
  `LastName` varchar(100) DEFAULT NULL,
  `EmailID` varchar(100) NOT NULL,
  `Password` varchar(100) NOT NULL,
  `Date` datetime DEFAULT NULL,
  `DOB` datetime DEFAULT NULL,
  `Address` varchar(500) DEFAULT NULL,
  `UserTypeID` int(11) NOT NULL,
  `AdminID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblUserRegistration`
--

INSERT INTO `tblUserRegistration` (`UserID`, `FirstName`, `LastName`, `EmailID`, `Password`, `Date`, `DOB`, `Address`, `UserTypeID`, `AdminID`) VALUES
(1, NULL, NULL, 'admin@gmail.com', 'admin@12', NULL, NULL, NULL, 1, 0),
(3, NULL, NULL, 'dnyaneshwartakbhate@acquiscent.com', 'amit', NULL, NULL, NULL, 2, 1),
(4, NULL, NULL, 'satyaprakashm15@gmail.com', 'satya2986', NULL, NULL, NULL, 2, 1),
(5, NULL, NULL, 'rohankarve95@gmail.com', 'Suvarna28$', NULL, NULL, NULL, 2, 1),
(6, NULL, NULL, 'kaushikrajnish98@gmail.com', 'rk1234', NULL, NULL, NULL, 2, 1),
(7, NULL, NULL, 'nikhitashelar10@gmail.com', 'nikki11095', NULL, NULL, NULL, 2, 1),
(8, NULL, NULL, 'pritipatil4183@gmail.com', 'soni@123', NULL, NULL, NULL, 2, 1),
(9, NULL, NULL, 'maheshwlk164924@gmail.com', '9702520235', NULL, NULL, NULL, 2, 1),
(10, NULL, NULL, 'chavank806@gmail.com', 'starlord123', NULL, NULL, NULL, 2, 1),
(11, NULL, NULL, 'neeva35@gmail.com', '7400395828', NULL, NULL, NULL, 2, 1),
(12, NULL, NULL, 'gauriborse66@gmail.com', 'acquiscent', NULL, NULL, NULL, 2, 1),
(13, NULL, NULL, 'suruchisingh194@gmail.com', 'suru2836', NULL, NULL, NULL, 2, 1),
(14, NULL, NULL, 'Ishita123.it@gmail.com', 'Ishita182009', NULL, NULL, NULL, 2, 1),
(15, NULL, NULL, 'vikramsatre97@gmail.com', 'Vikramsatre@121', NULL, NULL, NULL, 2, 1),
(16, NULL, NULL, 'mansibadgujar72@gmail.com', '123456', NULL, NULL, NULL, 2, 1),
(17, NULL, NULL, 'pravin.das001@gmail.com', 'pravindas95', NULL, NULL, NULL, 2, 1),
(18, NULL, NULL, 'shraddhajadhav.sj9@gmail.com', '1125shraddha', NULL, NULL, NULL, 2, 1),
(19, NULL, NULL, 'purva161996@gmail.com', 'purva1616', NULL, NULL, NULL, 2, 1),
(20, NULL, NULL, 'shreyajadhav012@gmail.com', 'shreyajadhav012', NULL, NULL, NULL, 2, 1),
(21, NULL, NULL, 'shubhamac18@gmail.com', 'admin', NULL, NULL, NULL, 2, 1),
(22, NULL, NULL, 'pradnyadmadhavi@gmail.com', 'admin', NULL, NULL, NULL, 2, 1),
(23, NULL, NULL, 'avaleranjana20@gmail.com', 'sattu123', NULL, NULL, NULL, 2, 1),
(24, NULL, NULL, 'patilaishwaryac4660@gmail.com', 'aishwarya1', NULL, NULL, NULL, 2, 1),
(25, NULL, NULL, 'shagunpathak1998@gmail.com', 'shagun@12', NULL, NULL, NULL, 2, 1),
(26, NULL, NULL, 'manjushshetty1111@gmail.com', 'SecurityUpdate', NULL, NULL, NULL, 2, 1),
(27, NULL, NULL, 'sahanisanjay5@gmail.com', '981924242420', NULL, NULL, NULL, 2, 1),
(28, NULL, NULL, 'cajay7446@gmail.com', 'satya7446', NULL, NULL, NULL, 2, 1),
(29, NULL, NULL, 'pmadhura13@gmail.com', '123456789', NULL, NULL, NULL, 2, 1),
(30, NULL, NULL, 'prasadpatil1607@gmail.com', 'funter@23', NULL, NULL, NULL, 2, 1),
(31, NULL, NULL, 'koli30798@gmail.com', 'acquiscent', NULL, NULL, NULL, 2, 1),
(32, NULL, NULL, 'shwetalid21@gmail.com', '23)W+v*R', NULL, NULL, NULL, 2, 1),
(33, NULL, NULL, 'jagrutikalekar11@gmail.com', 'jagruti@123', NULL, NULL, NULL, 2, 1),
(34, NULL, NULL, 'ashwinithakare110@gmail.com', 'ashu@110', NULL, NULL, NULL, 2, 1),
(35, NULL, NULL, 'singhkpooja17@gmail.com', 'pooja123', NULL, NULL, NULL, 2, 1),
(36, NULL, NULL, 'akshsanas@gmail.com', '8446443339', NULL, NULL, NULL, 2, 1),
(37, NULL, NULL, 'patilsampada96@gmail.com', 'sampada@123', NULL, NULL, NULL, 2, 1),
(38, NULL, NULL, 'sanjog.patil16@gmail.com', '7276791132', NULL, NULL, NULL, 2, 1),
(39, NULL, NULL, 'kajaldighore96@gmail.com', 'kajal1996', NULL, NULL, NULL, 2, 1),
(40, NULL, NULL, 'patilpshubh@gmail.com', 'shubh123', NULL, NULL, NULL, 2, 1),
(41, NULL, NULL, 'singhabhishek4500@gmail.com', 'abhi4500@@', NULL, NULL, NULL, 2, 1),
(42, NULL, NULL, 'yewaleomkar@gmail.com', 'Omkar@16', NULL, NULL, NULL, 2, 1),
(43, NULL, NULL, 'richab1497@gmail.com', 'V4MXeO^G', NULL, NULL, NULL, 2, 1),
(44, NULL, NULL, 'tejasbandawane5@gmail.com', 'tejasbandawane', NULL, NULL, NULL, 2, 1),
(45, NULL, NULL, 'asawariwaghule95@gmail.com', 'asawari7767', NULL, NULL, NULL, 2, 1),
(46, NULL, NULL, 'swetalid21@gmail.com', 'pratham2121', NULL, NULL, NULL, 2, 1),
(47, NULL, NULL, 'jitudabir9@gmail.com', 'J4tesh@1234', NULL, NULL, NULL, 2, 1),
(48, NULL, NULL, 'kunalthorat3393@gmail.com', 'bokya3393', NULL, NULL, NULL, 2, 1),
(49, NULL, NULL, 'shonakoli002@gmail.com', 'BjPnmi,=', NULL, NULL, NULL, 2, 1),
(50, NULL, NULL, 'bhandariricha14@gmail.com', 'o9zY+LAr', NULL, NULL, NULL, 2, 1),
(51, NULL, NULL, 'vpatil492@gmail.com', 'vishal890', NULL, NULL, NULL, 2, 1),
(52, NULL, NULL, 'shekhar.taker@yahoo.com', 'Sachinrt11', NULL, NULL, NULL, 2, 1),
(72, NULL, NULL, 'pratikshaah@acquiscent.com', 'pratiksha', NULL, NULL, NULL, 2, 1),
(76, NULL, NULL, 'abcd@gmail.com', 'PUpLBtnz', NULL, NULL, NULL, 2, 1),
(77, NULL, NULL, 'user1@gmail.com', 'KM:2=q3i', NULL, NULL, NULL, 2, 1),
(78, NULL, NULL, 'user5@gmail.com', '^3,gAhb.', NULL, NULL, NULL, 2, 5),
(79, NULL, NULL, 'user51@gmail.com', 'y,S)nCrP', NULL, NULL, NULL, 2, 5),
(80, NULL, NULL, 'user52@gmail.com', '$=kN@P67', NULL, NULL, NULL, 2, 5),
(81, NULL, NULL, 'pratikshahadawale72@gmail.com', 'pratiksha', NULL, NULL, NULL, 2, 28);

-- --------------------------------------------------------

--
-- Table structure for table `tblUserType`
--

CREATE TABLE `tblUserType` (
  `UserTypeID` int(11) NOT NULL,
  `UserType` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tblUserType`
--

INSERT INTO `tblUserType` (`UserTypeID`, `UserType`) VALUES
(1, 'admin'),
(2, 'regular_user');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `tblAdmins`
--
ALTER TABLE `tblAdmins`
  ADD PRIMARY KEY (`Admin_id`);

--
-- Indexes for table `tblAnswers`
--
ALTER TABLE `tblAnswers`
  ADD PRIMARY KEY (`AnswerID`);

--
-- Indexes for table `tblDescriptiveAns`
--
ALTER TABLE `tblDescriptiveAns`
  ADD PRIMARY KEY (`DescAnsID`);

--
-- Indexes for table `tblExamCoordinator`
--
ALTER TABLE `tblExamCoordinator`
  ADD PRIMARY KEY (`ExamCoordinatorID`);

--
-- Indexes for table `tblMultipleTypeQuesAssocAns`
--
ALTER TABLE `tblMultipleTypeQuesAssocAns`
  ADD PRIMARY KEY (`OptionAssocID`),
  ADD KEY `QuestionID` (`QuestionID`),
  ADD KEY `AnswerID` (`AnswerID`);

--
-- Indexes for table `tblQueAssocQueType`
--
ALTER TABLE `tblQueAssocQueType`
  ADD PRIMARY KEY (`QueTypeAssocID`),
  ADD KEY `QuestionID` (`QuestionID`),
  ADD KEY `QueTypeID` (`QueTypeID`);

--
-- Indexes for table `tblQueCorrectAns`
--
ALTER TABLE `tblQueCorrectAns`
  ADD PRIMARY KEY (`CorrectAnsID`),
  ADD KEY `QuestionID` (`QuestionID`),
  ADD KEY `AnswerID` (`AnswerID`);

--
-- Indexes for table `tblQuePaperAssocExamCoordinator`
--
ALTER TABLE `tblQuePaperAssocExamCoordinator`
  ADD PRIMARY KEY (`QuePaperAssocExamCoID`);

--
-- Indexes for table `tblQuePaperAssocQues`
--
ALTER TABLE `tblQuePaperAssocQues`
  ADD PRIMARY KEY (`QuePaperAssocID`),
  ADD KEY `TestID` (`TestID`),
  ADD KEY `QuePaperID` (`QuePaperID`),
  ADD KEY `QuestionID` (`QuestionID`);

--
-- Indexes for table `tblQuestionPaper`
--
ALTER TABLE `tblQuestionPaper`
  ADD PRIMARY KEY (`QuePaperID`),
  ADD KEY `UserID` (`UserID`);

--
-- Indexes for table `tblQuestions`
--
ALTER TABLE `tblQuestions`
  ADD PRIMARY KEY (`QuestionID`);

--
-- Indexes for table `tblQuestionType`
--
ALTER TABLE `tblQuestionType`
  ADD PRIMARY KEY (`QueTypeID`);

--
-- Indexes for table `tblTestDetails`
--
ALTER TABLE `tblTestDetails`
  ADD PRIMARY KEY (`TestID`);

--
-- Indexes for table `tblUserAttemptAns`
--
ALTER TABLE `tblUserAttemptAns`
  ADD PRIMARY KEY (`UserAttemptAnsID`),
  ADD KEY `UserAttemptQueID` (`UserAttemptQueID`);

--
-- Indexes for table `tblUserAttemptQuePaperDetails`
--
ALTER TABLE `tblUserAttemptQuePaperDetails`
  ADD PRIMARY KEY (`UserAttemptQPdetails_ID`);

--
-- Indexes for table `tblUserAttemptQuestion`
--
ALTER TABLE `tblUserAttemptQuestion`
  ADD PRIMARY KEY (`QueAttemptID`),
  ADD KEY `UserID` (`UserID`),
  ADD KEY `TestID` (`TestID`),
  ADD KEY `QuePaperID` (`QuePaperID`),
  ADD KEY `QuestionID` (`QuestionID`);

--
-- Indexes for table `tblUserRegistration`
--
ALTER TABLE `tblUserRegistration`
  ADD PRIMARY KEY (`UserID`),
  ADD KEY `UserTypeID` (`UserTypeID`);

--
-- Indexes for table `tblUserType`
--
ALTER TABLE `tblUserType`
  ADD PRIMARY KEY (`UserTypeID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `tblAdmins`
--
ALTER TABLE `tblAdmins`
  MODIFY `Admin_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;

--
-- AUTO_INCREMENT for table `tblAnswers`
--
ALTER TABLE `tblAnswers`
  MODIFY `AnswerID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=163;

--
-- AUTO_INCREMENT for table `tblDescriptiveAns`
--
ALTER TABLE `tblDescriptiveAns`
  MODIFY `DescAnsID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=346;

--
-- AUTO_INCREMENT for table `tblExamCoordinator`
--
ALTER TABLE `tblExamCoordinator`
  MODIFY `ExamCoordinatorID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `tblMultipleTypeQuesAssocAns`
--
ALTER TABLE `tblMultipleTypeQuesAssocAns`
  MODIFY `OptionAssocID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=163;

--
-- AUTO_INCREMENT for table `tblQueAssocQueType`
--
ALTER TABLE `tblQueAssocQueType`
  MODIFY `QueTypeAssocID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=68;

--
-- AUTO_INCREMENT for table `tblQueCorrectAns`
--
ALTER TABLE `tblQueCorrectAns`
  MODIFY `CorrectAnsID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=153;

--
-- AUTO_INCREMENT for table `tblQuePaperAssocExamCoordinator`
--
ALTER TABLE `tblQuePaperAssocExamCoordinator`
  MODIFY `QuePaperAssocExamCoID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT for table `tblQuePaperAssocQues`
--
ALTER TABLE `tblQuePaperAssocQues`
  MODIFY `QuePaperAssocID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=68;

--
-- AUTO_INCREMENT for table `tblQuestionPaper`
--
ALTER TABLE `tblQuestionPaper`
  MODIFY `QuePaperID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `tblQuestions`
--
ALTER TABLE `tblQuestions`
  MODIFY `QuestionID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=68;

--
-- AUTO_INCREMENT for table `tblQuestionType`
--
ALTER TABLE `tblQuestionType`
  MODIFY `QueTypeID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `tblTestDetails`
--
ALTER TABLE `tblTestDetails`
  MODIFY `TestID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `tblUserAttemptAns`
--
ALTER TABLE `tblUserAttemptAns`
  MODIFY `UserAttemptAnsID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1017;

--
-- AUTO_INCREMENT for table `tblUserAttemptQuePaperDetails`
--
ALTER TABLE `tblUserAttemptQuePaperDetails`
  MODIFY `UserAttemptQPdetails_ID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=251;

--
-- AUTO_INCREMENT for table `tblUserAttemptQuestion`
--
ALTER TABLE `tblUserAttemptQuestion`
  MODIFY `QueAttemptID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=849;

--
-- AUTO_INCREMENT for table `tblUserRegistration`
--
ALTER TABLE `tblUserRegistration`
  MODIFY `UserID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=82;

--
-- AUTO_INCREMENT for table `tblUserType`
--
ALTER TABLE `tblUserType`
  MODIFY `UserTypeID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
